{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const newEvent = {\n    summary: event.title,\n    description: event.description,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    });\n    const data = await response.json();\n    console.log('Google Calendar API response:', data); // Detailed log for each response\n\n    // Capture rate limit info from headers\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut(); // Logout if unauthorized\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching events from Airtable...');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Airtable events fetched:', data);\n    return data.records.filter(record => record.fields['Calendar Event Name'] && record.fields['startDate'] && record.fields['endDate']).map(record => ({\n      id: record.id,\n      title: record.fields['Calendar Event Name'] || 'Untitled Event',\n      start: new Date(record.fields['StartDate']),\n      end: new Date(record.fields['EndDate']),\n      description: record.fields['Billable Reason (If Billable)'] || '',\n      branch: record.fields['b'] || 'Unknown',\n      homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n      streetAddress: record.fields['Street Address'] || 'Unknown',\n      city: record.fields['City'] || 'Unknown',\n      state: record.fields['State'] || 'Unknown',\n      zipCode: record.fields['Zip Code'] || 'Unknown',\n      googleEventId: record.fields['GoogleEventId'] || null\n    }));\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  console.log(`Checking for duplicate events in Google Calendar for event: ${event.title}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    if (data.items) {\n      const isDuplicate = data.items.some(existingEvent => existingEvent.summary === event.title && existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`);\n      console.log(`Duplicate check for event \"${event.title}\": ${isDuplicate ? 'Found duplicate' : 'No duplicate'}`);\n      return isDuplicate;\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return false;\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    console.log(`Processing event \"${event.title}\"...`);\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`);\n      continue;\n    }\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n    const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      failed.push(event.title);\n    }\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo,\n    triggerSync,\n    setTriggerSync\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTriggerSync(false); // Reset the triggerSync after sync\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error));\n      }\n    };\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarSection, \"angMAHcm2jE5suJWSu8EeeNlGl0=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    remaining: null,\n    limit: null,\n    reset: null\n  });\n  const [triggerSync, setTriggerSync] = useState(false);\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Savannah'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          margin: '0 auto'\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSyncNow,\n            children: \"Sync Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              setRateLimitInfo: setRateLimitInfo,\n              triggerSync: triggerSync,\n              setTriggerSync: setTriggerSync\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 384,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rate-limit-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Google Calendar API Rate Limit Information:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 17\n            }, this), rateLimitInfo.limit !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Limit: \", rateLimitInfo.limit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Remaining: \", rateLimitInfo.remaining]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Reset Time: \", new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No rate limit information available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar'\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"Smo9ehPqtUTDVtuaDO+GPE/J6hg=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","debounce","fn","delay","timeoutId","args","clearTimeout","setTimeout","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","console","log","provider_token","error","url","newEvent","summary","title","description","start","dateTime","toISOString","end","location","streetAddress","city","state","zipCode","response","fetch","method","headers","Authorization","body","JSON","stringify","data","json","remaining","get","limit","reset","ok","id","code","fetchAirtableEvents","retryCount","maxRetries","status","retryAfter","waitTime","parseInt","Math","pow","warn","Promise","resolve","Error","records","filter","record","fields","map","Date","branch","homeownerName","googleEventId","checkForDuplicateEvent","items","isDuplicate","some","existingEvent","sleep","ms","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","airtableEvents","added","failed","toLowerCase","push","updateAirtableWithGoogleEventId","prev","CalendarSection","triggerSync","setTriggerSync","lastSyncTime","setLastSyncTime","syncEvents","now","then","catch","App","supabase","isLoading","addedRecords","failedRecords","rateLimitInfo","calendarInfo","name","sort","a","b","localeCompare","handleSyncNow","getGreeting","currentHour","getHours","width","margin","user","email","calendar","auth","length","index","toLocaleTimeString","signInWithOAuth","provider","options","scopes"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const newEvent = {\n    summary: event.title,\n    description: event.description,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newEvent),\n    });\n\n    const data = await response.json();\n    console.log('Google Calendar API response:', data); // Detailed log for each response\n\n    // Capture rate limit info from headers\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut(); // Logout if unauthorized\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching events from Airtable...');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n\n        if (retryCount < maxRetries) {\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n\n    const data = await response.json();\n    console.log('Airtable events fetched:', data);\n\n    return data.records\n      .filter(\n        (record) =>\n          record.fields['Calendar Event Name'] &&\n          record.fields['startDate'] &&\n          record.fields['endDate']\n      )\n      .map((record) => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || 'Untitled Event',\n        start: new Date(record.fields['StartDate']),\n        end: new Date(record.fields['EndDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null,\n      }));\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  console.log(`Checking for duplicate events in Google Calendar for event: ${event.title}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n    if (data.items) {\n      const isDuplicate = data.items.some(\n        (existingEvent) =>\n          existingEvent.summary === event.title &&\n          existingEvent.location ===\n            `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n      );\n      console.log(\n        `Duplicate check for event \"${event.title}\": ${isDuplicate ? 'Found duplicate' : 'No duplicate'}`\n      );\n      return isDuplicate;\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return false;\n  }\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function populateGoogleCalendarWithAirtableRecords(\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo\n) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    console.log(`Processing event \"${event.title}\"...`);\n\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(\n        `Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`\n      );\n      continue;\n    }\n\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n\n    const googleEventId = await createGoogleCalendarEvent(\n      event,\n      calendarId,\n      session,\n      signOut,\n      setRateLimitInfo\n    );\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      failed.push(event.title);\n    }\n\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords((prev) => [...prev, ...added]);\n  setFailedRecords((prev) => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\n\nfunction CalendarSection({\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  triggerSync,\n  setTriggerSync\n}) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId,\n          calendarName,\n          session,\n          signOut,\n          setAddedRecords,\n          setFailedRecords,\n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n            setLastSyncTime(new Date()); // Update last sync time\n            setTriggerSync(false); // Reset the triggerSync after sync\n          })\n          .catch((error) =>\n            console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error)\n          );\n      }\n    };\n\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n    </div>\n  );\n}\n\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({ remaining: null, limit: null, reset: null });\n  const [triggerSync, setTriggerSync] = useState(false);\n\n  const calendarInfo = [\n\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Savannah' }\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: '100%', margin: '0 auto' }}>\n          {session ? (\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <button onClick={handleSyncNow}>Sync Now</button> {/* Manual Sync Button */}\n              <div className=\"calendar-grid\">\n                {calendarInfo.map((calendar) => (\n                  <CalendarSection\n                    key={calendar.id}\n                    calendarId={calendar.id}\n                    calendarName={calendar.name}\n                    session={session}\n                    signOut={() => supabase.auth.signOut()}\n                    setAddedRecords={setAddedRecords}\n                    setFailedRecords={setFailedRecords}\n                    setRateLimitInfo={setRateLimitInfo}\n                    triggerSync={triggerSync}\n                    setTriggerSync={setTriggerSync}\n                  />\n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"rate-limit-info\">\n                <h4>Google Calendar API Rate Limit Information:</h4>\n                {rateLimitInfo.limit !== null ? (\n                  <ul>\n                    <li>Limit: {rateLimitInfo.limit}</li>\n                    <li>Remaining: {rateLimitInfo.remaining}</li>\n                    <li>Reset Time: {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()}</li>\n                  </ul>\n                ) : (\n                  <p>No rate limit information available.</p>\n                )}\n              </div>\n              <p></p>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n          ) : (\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({ provider: 'google', options: { scopes: 'https://www.googleapis.com/auth/calendar' } })}>\n                Sign In With Google\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}