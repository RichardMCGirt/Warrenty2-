{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  // Final duplicate check before creating\n  const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n  if (existingGoogleEventId) {\n    console.log('Duplicate event detected in final check, skipping creation:', existingGoogleEventId);\n    return existingGoogleEventId;\n  }\n\n  // Proceed with event creation\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('Event data being sent to Google Calendar API:', updatedEvent);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedEvent)\n    });\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true);\n      return null;\n    }\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut) {\n  let setRateLimitInfo = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : () => {};\n  let setRateLimitHit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : () => {};\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedEvent)\n    });\n\n    // Check for rate limit and handle it\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error && data.error.code === 401) {\n        signOut(); // Handle invalid token by signing out\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request in updateGoogleCalendarEvent:', error);\n    return null;\n  }\n}\nasync function updateAirtableWithGoogleEventIdAndProcessed(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId} and marking as processed`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=NOT({GoogleEventId} = BLANK())`;\n  const updateData = {\n    fields: {\n      Processed: true,\n      // Mark as processed\n      LastUpdated: new Date().toISOString() // Optional field to track last update\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (!response.ok) {\n      throw new Error(data.error);\n    }\n    console.log('Airtable record successfully updated with Google Event ID and marked as processed:', data);\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function lockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: true // Mark record as being processed\n    }\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    console.log(`Locked record ${airtableRecordId} for processing`);\n  } catch (error) {\n    console.error(`Failed to lock record ${airtableRecordId}`, error);\n  }\n}\nasync function unlockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fields: {}\n      }) // Empty body if you are no longer updating any fields\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      console.error('Error unlocking Airtable record:', data.error || data);\n      throw new Error(data.error || 'Unknown error');\n    }\n    console.log(`Unlocked record ${airtableRecordId} after processing`);\n  } catch (error) {\n    console.error(`Failed to unlock record ${airtableRecordId}`, error);\n  }\n}\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true // Mark as processed\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching unprocessed events from Airtable...');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=OR(NOT({Processed}), {GoogleEventId} != BLANK())`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return [];\n    }\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n    const filteredRecords = data.records.filter(record => {\n      // Ensure event has a name, start and end dates\n      return record.fields['Calendar Event Name'] && record.fields['StartDate'] && record.fields['EndDate'];\n    }).map(record => ({\n      id: record.id,\n      title: record.fields['Calendar Event Name'] || 'Untitled Event',\n      start: new Date(record.fields['StartDate']),\n      end: new Date(record.fields['EndDate']),\n      description: record.fields['Billable Reason (If Billable)'] || '',\n      branch: record.fields['b'] || 'Unknown',\n      homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n      materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n      streetAddress: record.fields['Street Address'] || 'Unknown',\n      city: record.fields['City'] || 'Unknown',\n      state: record.fields['State'] || 'Unknown',\n      zipCode: record.fields['Zip Code'] || 'Unknown',\n      googleEventId: record.fields['GoogleEventId'] || null,\n      processed: record.fields['Processed'] || false // Track the Processed field\n    }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    return [];\n  }\n}\nasync function fetchGoogleCalendarEvents(calendarId, session) {\n  const now = new Date().toISOString();\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${now}&singleEvents=true&orderBy=startTime`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return data.items || []; // Return events from Google Calendar\n    } else {\n      console.error('Failed to fetch Google Calendar events:', data);\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching Google Calendar events:', error);\n    return [];\n  }\n}\n\n// Utility function to format the date into 'M/D/YYYY h:mm AM/PM' format\nfunction formatDateTime(date) {\n  return new Date(date).toLocaleString('en-US', {\n    month: 'numeric',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n}\n\n// Function to handle default time if time is not provided\nfunction ensureTime(event) {\n  if (!event.start.dateTime) {\n    // If no time is provided, default to 12:00 AM to 12:00 PM\n    return {\n      start: new Date(`${event.start.date}T00:00:00`),\n      // 12:00 AM\n      end: new Date(`${event.start.date}T12:00:00`) // 12:00 PM\n    };\n  }\n  // Return the provided start and end times\n  return {\n    start: new Date(event.start.dateTime),\n    end: new Date(event.end.dateTime)\n  };\n}\nasync function syncGoogleCalendarToAirtable(calendarId, session, signOut, setAddedRecords, setFailedRecords) {\n  console.log(`Syncing Google Calendar \"${calendarId}\" to Airtable...`);\n\n  // Fetch Google Calendar events\n  const googleEvents = await fetchGoogleCalendarEvents(calendarId, session);\n  console.log(`Fetched ${googleEvents.length} Google Calendar events.`);\n  const added = [];\n  const failed = [];\n\n  // First, sync Google Calendar events to Airtable\n  for (const googleEvent of googleEvents) {\n    const {\n      start,\n      end\n    } = ensureTime(googleEvent);\n    const formattedStartDate = formatDateTime(start);\n    const formattedEndDate = formatDateTime(end);\n    const airtableRecord = {\n      fields: {\n        StartDate: formattedStartDate,\n        EndDate: formattedEndDate,\n        'Event Title': googleEvent.summary || 'Untitled Event',\n        GoogleEventId: googleEvent.id,\n        // This is where the Google Event ID is stored\n        Processed: true\n      }\n    };\n    try {\n      const response = await fetch(`https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`, {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(airtableRecord)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(`Successfully added Google event to Airtable: ${googleEvent.summary}`);\n        added.push(googleEvent.summary);\n      } else {\n        console.error(`Failed to add Google event to Airtable. Status: ${response.status}`);\n        console.error('Error Details:', data);\n        failed.push(googleEvent.summary);\n      }\n    } catch (error) {\n      console.error(`Error adding Google event to Airtable: ${error.message}`);\n      failed.push(googleEvent.summary);\n    }\n  }\n\n  // Now, fetch events from Airtable and populate them in Google Calendar\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Fetched ${airtableEvents.length} Airtable events.`);\n  for (const airtableEvent of airtableEvents) {\n    try {\n      // Check if the event already has a GoogleEventId\n      if (airtableEvent.googleEventId) {\n        console.log(`Event \"${airtableEvent.title}\" already exists in Google Calendar with ID: ${airtableEvent.googleEventId}. Skipping.`);\n        continue;\n      }\n\n      // Create a new Google Calendar event\n      const newGoogleEventId = await createGoogleCalendarEvent(airtableEvent, calendarId, session, signOut, setAddedRecords);\n      if (newGoogleEventId) {\n        console.log(`Successfully added Airtable event \"${airtableEvent.title}\" to Google Calendar.`);\n\n        // Update Airtable with the newly created Google Event ID and mark as processed\n        await updateAirtableWithGoogleEventIdAndProcessed(airtableEvent.id, newGoogleEventId);\n      } else {\n        console.error(`Failed to add Airtable event \"${airtableEvent.title}\" to Google Calendar.`);\n      }\n    } catch (error) {\n      console.error(`Error processing Airtable event \"${airtableEvent.title}\":`, error);\n    }\n  }\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished syncing Google Calendar \"${calendarId}\" to Airtable and populating Google Calendar with Airtable events.`);\n}\nasync function checkForDuplicateLocation(location) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND({location}='${location}', {GoogleEventId} != BLANK())`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer YOUR_AIRTABLE_API_KEY',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return null;\n    }\n    const data = await response.json();\n    if (data.records.length > 0) {\n      console.log('Duplicate location found:', data.records);\n      return data.records[0]; // Return the first duplicate record found\n    }\n\n    return null; // No duplicate found\n  } catch (error) {\n    console.error('Error fetching duplicate location from Airtable:', error);\n    return null;\n  }\n}\nasync function handleEventCreationOrUpdate(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  // Step 1: Check for duplicate by location\n  const duplicateRecord = await checkForDuplicateLocation(`${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`);\n  if (duplicateRecord) {\n    console.log(`Duplicate location found for event \"${event.title}\". Checking for updates...`);\n\n    // Step 2: Compare the start and end times to determine if an update is needed\n    if (new Date(duplicateRecord.fields.StartDate).getTime() !== event.start.getTime() || new Date(duplicateRecord.fields.EndDate).getTime() !== event.end.getTime()) {\n      console.log('Event times have changed. Updating Google Calendar and Airtable...');\n      // Update the Google Calendar event and Airtable record\n      const updatedGoogleEventId = await updateGoogleCalendarEvent(event, calendarId, duplicateRecord.fields.GoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n      await updateAirtableWithProcessed(duplicateRecord.id); // Mark the record as processed after update\n    } else {\n      console.log('No changes detected. Skipping update.');\n    }\n  } else {\n    console.log('No duplicate found. Creating new event and record...');\n    // Step 3: Create new event and record\n    const newGoogleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit);\n    if (newGoogleEventId) {\n      // Create a new record in Airtable\n      await updateAirtableWithGoogleEventIdAndProcessed(null, newGoogleEventId);\n    }\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo, rateLimitHit, setRateLimitHit) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    if (rateLimitHit) {\n      console.log(`Rate limit hit. Stopping further processing.`);\n      break;\n    }\n    console.log(`Processing event \"${event.title}\"...`);\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch mismatch.`);\n      continue;\n    }\n\n    // Lock the record to prevent it from being processed by another process\n    await lockAirtableRecord(event.id);\n    try {\n      if (event.googleEventId) {\n        console.log(`Event \"${event.title}\" already has a GoogleEventId: ${event.googleEventId}. Verifying in Google Calendar...`);\n        const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n\n        // Only proceed if existingGoogleEventId is not null\n        if (existingGoogleEventId) {\n          const updatedGoogleEventId = await updateGoogleCalendarEvent(event, calendarId, existingGoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n          if (updatedGoogleEventId) {\n            added.push(event.title);\n            await updateAirtableWithProcessed(event.id); // Mark as processed\n          } else {\n            failed.push(event.title);\n          }\n        } else {\n          console.log(`No duplicate found for event \"${event.title}\". Skipping update.`);\n        }\n      } else {\n        // Check Google Calendar for an existing event to avoid duplicates\n        const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit);\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventIdAndProcessed(event.id, googleEventId);\n          added.push(event.title);\n        } else {\n          failed.push(event.title);\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing event \"${event.title}\":`, error);\n      failed.push(event.title);\n    }\n    await unlockAirtableRecord(event.id); // Unlock the record after processing\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo,\n    triggerSync,\n    setTriggerSync\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTriggerSync(false); // Reset the triggerSync after sync\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error));\n      }\n    };\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents(); // Call syncEvents once here, no recursion\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 670,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to refresh the access token\n_s(CalendarSection, \"angMAHcm2jE5suJWSu8EeeNlGl0=\");\n_c = CalendarSection;\nasync function refreshAccessToken(refresh_token) {\n  const tokenURL = 'https://oauth2.googleapis.com/token';\n  const params = new URLSearchParams();\n  params.append('client_id', process.env.REACT_APP_GOOGLE_CLIENT_ID);\n  params.append('client_secret', process.env.REACT_APP_GOOGLE_CLIENT_SECRET);\n  params.append('refresh_token', refresh_token);\n  params.append('grant_type', 'refresh_token');\n  console.log('client_id:', process.env.REACT_APP_GOOGLE_CLIENT_ID);\n  console.log('client_secret:', process.env.REACT_APP_GOOGLE_CLIENT_SECRET);\n  console.log('refresh_token:', refresh_token);\n  try {\n    const response = await fetch(tokenURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: params.toString()\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Access token refreshed:', data.access_token);\n      return data.access_token;\n    } else {\n      // Log detailed error information\n      console.error('Failed to refresh access token:');\n      console.error('Error Code:', data.error); // The specific error code, e.g., 'invalid_grant'\n      console.error('Error Description:', data.error_description); // Detailed description of the error\n      console.error('Full Error Response:', data); // Log the full response object for any additional info\n      return null;\n    }\n  } catch (error) {\n    console.error('Error refreshing access token:', error);\n    return null;\n  }\n}\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false);\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Charleston Warranty Calendar'\n  }];\n  const handleSyncNow = async () => {\n    console.log('Manual sync button clicked for all calendars.');\n    for (const calendar of calendarInfo) {\n      try {\n        // Sync Google Calendar events to Airtable\n        await syncGoogleCalendarToAirtable(calendar.id,\n        // Use each calendar's id\n        session, () => supabase.auth.signOut(), setAddedRecords, setFailedRecords);\n\n        // Fetch Google Calendar events to update Airtable with Google Event details\n        const googleEvents = await fetchGoogleCalendarEvents(calendar.id, session);\n        for (const googleEvent of googleEvents) {\n          // Ensure event has start and end times\n          const {\n            start,\n            end\n          } = ensureTime(googleEvent);\n\n          // Format the dates in the required format\n          const formattedStartDate = formatDateTime(start);\n          const formattedEndDate = formatDateTime(end);\n\n          // Prepare the data to update Airtable with Google Calendar event details\n          const airtableUpdateRecord = {\n            fields: {\n              StartDate: formattedStartDate,\n              // Formatted Start Date\n              EndDate: formattedEndDate,\n              // Formatted End Date\n              'Event Title': googleEvent.summary || 'Untitled Event',\n              // Event Title\n              GoogleEventId: googleEvent.id,\n              // Google Calendar Event ID\n              Processed: true // Mark as processed\n            }\n          };\n\n          // Update Airtable with Google Calendar event details\n          try {\n            const response = await fetch(`https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`, {\n              method: 'POST',\n              headers: {\n                'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(airtableUpdateRecord)\n            });\n            const data = await response.json();\n            if (response.ok) {\n              console.log(`Successfully updated Airtable with Google event: ${googleEvent.summary}`);\n            } else {\n              console.error(`Failed to update Airtable. Status: ${response.status}`);\n              console.error('Error Details:', data);\n            }\n          } catch (error) {\n            console.error(`Error updating Airtable with Google event details: ${error.message}`);\n          }\n        }\n      } catch (error) {\n        console.error('Error syncing Google Calendar to Airtable:', error);\n      }\n    }\n  };\n\n  // Check if access token is still valid\n  function isAccessTokenValid() {\n    const expirationTime = localStorage.getItem('expiration_time');\n    if (!expirationTime) {\n      return false;\n    }\n    return new Date().getTime() < expirationTime;\n  }\n  useEffect(() => {\n    if (session) {\n      const refreshTokenAsync = async () => {\n        const refresh_token = session.refresh_token;\n        const access_token = localStorage.getItem('access_token');\n\n        // Only refresh the token if it's expired\n        if (!isAccessTokenValid()) {\n          console.log('Access token expired, refreshing...');\n          const newAccessToken = await refreshAccessToken(refresh_token);\n          if (newAccessToken) {\n            await supabase.auth.setSession({\n              access_token: newAccessToken\n            });\n          }\n        } else {\n          console.log('Access token is still valid, no need to refresh.');\n        }\n      };\n      refreshTokenAsync();\n    }\n  }, [session, supabase]);\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          margin: '0 auto'\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSyncNow,\n            children: \"Sync Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              triggerSync: triggerSync,\n              setTriggerSync: setTriggerSync,\n              rateLimitHit: rateLimitHit // Pass rateLimitHit as prop\n              ,\n              setRateLimitHit: setRateLimitHit // Pass setter as prop\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 854,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 872,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 875,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 879,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 877,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 883,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 874,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 887,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 891,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 889,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 895,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 886,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 873,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar',\n                access_type: 'offline',\n                // Request offline access for refresh token\n                prompt: 'consent' // Force Google to show consent screen (ensures refresh token is issued)\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 846,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 845,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"y882RRwECfbqr3WwmY9o30YqsxY=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","setRateLimitHit","console","log","existingGoogleEventId","checkForDuplicateEvent","url","updatedEvent","summary","title","description","location","homeownerName","materialsNeeded","start","dateTime","toISOString","end","streetAddress","city","state","zipCode","response","fetch","method","headers","Authorization","provider_token","body","JSON","stringify","status","error","data","json","ok","id","updateGoogleCalendarEvent","eventId","remaining","get","limit","reset","code","updateAirtableWithGoogleEventIdAndProcessed","airtableRecordId","googleEventId","updateData","fields","Processed","LastUpdated","Date","Error","lockAirtableRecord","Processing","unlockAirtableRecord","updateAirtableWithProcessed","fetchAirtableEvents","retryCount","filteredRecords","records","filter","record","map","branch","processed","length","fetchGoogleCalendarEvents","now","items","formatDateTime","date","toLocaleString","month","day","year","hour","minute","hour12","ensureTime","syncGoogleCalendarToAirtable","setAddedRecords","setFailedRecords","googleEvents","added","failed","googleEvent","formattedStartDate","formattedEndDate","airtableRecord","StartDate","EndDate","GoogleEventId","push","message","airtableEvents","airtableEvent","newGoogleEventId","prev","checkForDuplicateLocation","handleEventCreationOrUpdate","duplicateRecord","getTime","updatedGoogleEventId","sleep","ms","Promise","resolve","setTimeout","populateGoogleCalendarWithAirtableRecords","calendarName","rateLimitHit","toLowerCase","CalendarSection","triggerSync","setTriggerSync","lastSyncTime","setLastSyncTime","syncEvents","then","catch","refreshAccessToken","refresh_token","tokenURL","params","URLSearchParams","append","process","env","REACT_APP_GOOGLE_CLIENT_ID","REACT_APP_GOOGLE_CLIENT_SECRET","toString","access_token","error_description","App","supabase","isLoading","addedRecords","failedRecords","calendarInfo","name","handleSyncNow","calendar","auth","airtableUpdateRecord","isAccessTokenValid","expirationTime","localStorage","getItem","refreshTokenAsync","newAccessToken","setSession","getGreeting","currentHour","getHours","width","margin","user","email","index","signInWithOAuth","provider","options","scopes","access_type","prompt"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n\n\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  // Final duplicate check before creating\n  const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n  if (existingGoogleEventId) {\n    console.log('Duplicate event detected in final check, skipping creation:', existingGoogleEventId);\n    return existingGoogleEventId;\n  }\n\n  // Proceed with event creation\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n  \n\n  console.log('Event data being sent to Google Calendar API:', updatedEvent);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedEvent),\n    });\n\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true);\n      return null;\n    }\n\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\n\nasync function updateGoogleCalendarEvent(\n  event,\n  calendarId,\n  eventId,\n  session,\n  signOut,\n  setRateLimitInfo = () => {}, // Default empty function\n  setRateLimitHit = () => {} // Default empty function\n) {  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedEvent),\n    });\n\n    // Check for rate limit and handle it\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error && data.error.code === 401) {\n        signOut(); // Handle invalid token by signing out\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request in updateGoogleCalendarEvent:', error);\n    return null;\n  }\n}\n\n\nasync function updateAirtableWithGoogleEventIdAndProcessed(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId} and marking as processed`);\n  \n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=NOT({GoogleEventId} = BLANK())`;\n  const updateData = {\n    fields: {\n      Processed: true,  // Mark as processed\n      LastUpdated: new Date().toISOString() // Optional field to track last update\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (!response.ok) {\n      throw new Error(data.error);\n    }\n\n    console.log('Airtable record successfully updated with Google Event ID and marked as processed:', data);\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\nasync function lockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: true, // Mark record as being processed\n    },\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n    console.log(`Locked record ${airtableRecordId} for processing`);\n  } catch (error) {\n    console.error(`Failed to lock record ${airtableRecordId}`, error);\n  }\n}\n\nasync function unlockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ fields: {} }), // Empty body if you are no longer updating any fields\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      console.error('Error unlocking Airtable record:', data.error || data);\n      throw new Error(data.error || 'Unknown error');\n    }\n\n    console.log(`Unlocked record ${airtableRecordId} after processing`);\n  } catch (error) {\n    console.error(`Failed to unlock record ${airtableRecordId}`, error);\n  }\n}\n\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true,  // Mark as processed\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching unprocessed events from Airtable...');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=OR(NOT({Processed}), {GoogleEventId} != BLANK())`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return [];\n    }\n\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n\n    const filteredRecords = data.records\n      .filter((record) => {\n        // Ensure event has a name, start and end dates\n        return record.fields['Calendar Event Name'] && record.fields['StartDate'] && record.fields['EndDate'];\n      })\n      .map((record) => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || 'Untitled Event',\n        start: new Date(record.fields['StartDate']),\n        end: new Date(record.fields['EndDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null,\n        processed: record.fields['Processed'] || false,  // Track the Processed field\n      }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    return [];\n  }\n}\n\nasync function fetchGoogleCalendarEvents(calendarId, session) {\n  const now = new Date().toISOString();\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${now}&singleEvents=true&orderBy=startTime`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      return data.items || [];  // Return events from Google Calendar\n    } else {\n      console.error('Failed to fetch Google Calendar events:', data);\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching Google Calendar events:', error);\n    return [];\n  }\n}\n\n// Utility function to format the date into 'M/D/YYYY h:mm AM/PM' format\nfunction formatDateTime(date) {\n  return new Date(date).toLocaleString('en-US', {\n    month: 'numeric',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n}\n\n// Function to handle default time if time is not provided\nfunction ensureTime(event) {\n  if (!event.start.dateTime) {\n    // If no time is provided, default to 12:00 AM to 12:00 PM\n    return {\n      start: new Date(`${event.start.date}T00:00:00`), // 12:00 AM\n      end: new Date(`${event.start.date}T12:00:00`),   // 12:00 PM\n    };\n  }\n  // Return the provided start and end times\n  return {\n    start: new Date(event.start.dateTime),\n    end: new Date(event.end.dateTime),\n  };\n}\n\nasync function syncGoogleCalendarToAirtable(\n  calendarId,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords\n) {\n  console.log(`Syncing Google Calendar \"${calendarId}\" to Airtable...`);\n\n  // Fetch Google Calendar events\n  const googleEvents = await fetchGoogleCalendarEvents(calendarId, session);\n  console.log(`Fetched ${googleEvents.length} Google Calendar events.`);\n\n  const added = [];\n  const failed = [];\n\n  // First, sync Google Calendar events to Airtable\n  for (const googleEvent of googleEvents) {\n    const { start, end } = ensureTime(googleEvent);\n\n    const formattedStartDate = formatDateTime(start);\n    const formattedEndDate = formatDateTime(end);\n\n    const airtableRecord = {\n      fields: {\n        StartDate: formattedStartDate,\n        EndDate: formattedEndDate,\n        'Event Title': googleEvent.summary || 'Untitled Event',\n        GoogleEventId: googleEvent.id,  // This is where the Google Event ID is stored\n        Processed: true,\n      },\n    };\n\n    try {\n      const response = await fetch(`https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`, {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(airtableRecord),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        console.log(`Successfully added Google event to Airtable: ${googleEvent.summary}`);\n        added.push(googleEvent.summary);\n      } else {\n        console.error(`Failed to add Google event to Airtable. Status: ${response.status}`);\n        console.error('Error Details:', data);\n        failed.push(googleEvent.summary);\n      }\n    } catch (error) {\n      console.error(`Error adding Google event to Airtable: ${error.message}`);\n      failed.push(googleEvent.summary);\n    }\n  }\n\n  // Now, fetch events from Airtable and populate them in Google Calendar\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Fetched ${airtableEvents.length} Airtable events.`);\n\n  for (const airtableEvent of airtableEvents) {\n    try {\n      // Check if the event already has a GoogleEventId\n      if (airtableEvent.googleEventId) {\n        console.log(`Event \"${airtableEvent.title}\" already exists in Google Calendar with ID: ${airtableEvent.googleEventId}. Skipping.`);\n        continue;\n      }\n\n      // Create a new Google Calendar event\n      const newGoogleEventId = await createGoogleCalendarEvent(\n        airtableEvent, \n        calendarId, \n        session, \n        signOut, \n        setAddedRecords, \n      );\n\n      if (newGoogleEventId) {\n        console.log(`Successfully added Airtable event \"${airtableEvent.title}\" to Google Calendar.`);\n        \n        // Update Airtable with the newly created Google Event ID and mark as processed\n        await updateAirtableWithGoogleEventIdAndProcessed(airtableEvent.id, newGoogleEventId);\n      } else {\n        console.error(`Failed to add Airtable event \"${airtableEvent.title}\" to Google Calendar.`);\n      }\n\n    } catch (error) {\n      console.error(`Error processing Airtable event \"${airtableEvent.title}\":`, error);\n    }\n  }\n\n  setAddedRecords((prev) => [...prev, ...added]);\n  setFailedRecords((prev) => [...prev, ...failed]);\n\n  console.log(`Finished syncing Google Calendar \"${calendarId}\" to Airtable and populating Google Calendar with Airtable events.`);\n}\n\nasync function checkForDuplicateLocation(location) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND({location}='${location}', {GoogleEventId} != BLANK())`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer YOUR_AIRTABLE_API_KEY',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return null;\n    }\n\n    const data = await response.json();\n    if (data.records.length > 0) {\n      console.log('Duplicate location found:', data.records);\n      return data.records[0]; // Return the first duplicate record found\n    }\n\n    return null; // No duplicate found\n  } catch (error) {\n    console.error('Error fetching duplicate location from Airtable:', error);\n    return null;\n  }\n}\n\n\n\nasync function handleEventCreationOrUpdate(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  // Step 1: Check for duplicate by location\n  const duplicateRecord = await checkForDuplicateLocation(`${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`);\n\n  if (duplicateRecord) {\n    console.log(`Duplicate location found for event \"${event.title}\". Checking for updates...`);\n    \n    // Step 2: Compare the start and end times to determine if an update is needed\n    if (new Date(duplicateRecord.fields.StartDate).getTime() !== event.start.getTime() ||\n        new Date(duplicateRecord.fields.EndDate).getTime() !== event.end.getTime()) {\n      console.log('Event times have changed. Updating Google Calendar and Airtable...');\n      // Update the Google Calendar event and Airtable record\n      const updatedGoogleEventId = await updateGoogleCalendarEvent(event, calendarId, duplicateRecord.fields.GoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n      await updateAirtableWithProcessed(duplicateRecord.id); // Mark the record as processed after update\n    } else {\n      console.log('No changes detected. Skipping update.');\n    }\n\n  } else {\n    console.log('No duplicate found. Creating new event and record...');\n    // Step 3: Create new event and record\n    const newGoogleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit);\n    if (newGoogleEventId) {\n      // Create a new record in Airtable\n      await updateAirtableWithGoogleEventIdAndProcessed(null, newGoogleEventId);\n    }\n  }\n}\n\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function populateGoogleCalendarWithAirtableRecords(\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  rateLimitHit,\n  setRateLimitHit\n) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    if (rateLimitHit) {\n      console.log(`Rate limit hit. Stopping further processing.`);\n      break;\n    }\n\n    console.log(`Processing event \"${event.title}\"...`);\n\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch mismatch.`);\n      continue;\n    }\n\n    // Lock the record to prevent it from being processed by another process\n    await lockAirtableRecord(event.id);\n\n    try {\n      if (event.googleEventId) {\n        console.log(`Event \"${event.title}\" already has a GoogleEventId: ${event.googleEventId}. Verifying in Google Calendar...`);\n\n        const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n\n        // Only proceed if existingGoogleEventId is not null\n        if (existingGoogleEventId) {\n          const updatedGoogleEventId = await updateGoogleCalendarEvent(\n            event,\n            calendarId,\n            existingGoogleEventId,\n            session,\n            signOut,\n            setRateLimitInfo,\n            setRateLimitHit\n          );\n\n          if (updatedGoogleEventId) {\n            added.push(event.title);\n            await updateAirtableWithProcessed(event.id); // Mark as processed\n          } else {\n            failed.push(event.title);\n          }\n        } else {\n          console.log(`No duplicate found for event \"${event.title}\". Skipping update.`);\n        }\n      } else {\n        // Check Google Calendar for an existing event to avoid duplicates\n        const googleEventId = await createGoogleCalendarEvent(\n          event,\n          calendarId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventIdAndProcessed(event.id, googleEventId);\n          added.push(event.title);\n        } else {\n          failed.push(event.title);\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing event \"${event.title}\":`, error);\n      failed.push(event.title);\n    }\n\n    await unlockAirtableRecord(event.id); // Unlock the record after processing\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords((prev) => [...prev, ...added]);\n  setFailedRecords((prev) => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\n\n\n\nfunction CalendarSection({\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  triggerSync,\n  setTriggerSync\n}) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n  \n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n  \n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId,\n          calendarName,\n          session,\n          signOut,\n          setAddedRecords,\n          setFailedRecords,\n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n            setLastSyncTime(new Date()); // Update last sync time\n            setTriggerSync(false); // Reset the triggerSync after sync\n          })\n          .catch((error) =>\n            console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error)\n          );\n      }\n    };\n  \n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents(); // Call syncEvents once here, no recursion\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  \n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n    </div>\n  );\n}\n\n// Function to refresh the access token\nasync function refreshAccessToken(refresh_token) {\n  const tokenURL = 'https://oauth2.googleapis.com/token';\n  const params = new URLSearchParams();\n\n  params.append('client_id', process.env.REACT_APP_GOOGLE_CLIENT_ID);\n  params.append('client_secret', process.env.REACT_APP_GOOGLE_CLIENT_SECRET);\n  params.append('refresh_token', refresh_token);\n  params.append('grant_type', 'refresh_token');\n\n  console.log('client_id:', process.env.REACT_APP_GOOGLE_CLIENT_ID);\n  console.log('client_secret:', process.env.REACT_APP_GOOGLE_CLIENT_SECRET);\n  console.log('refresh_token:', refresh_token);\n\n  try {\n    const response = await fetch(tokenURL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: params.toString(),\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      console.log('Access token refreshed:', data.access_token);\n      return data.access_token;\n    } else {\n      // Log detailed error information\n      console.error('Failed to refresh access token:');\n      console.error('Error Code:', data.error);  // The specific error code, e.g., 'invalid_grant'\n      console.error('Error Description:', data.error_description);  // Detailed description of the error\n      console.error('Full Error Response:', data);  // Log the full response object for any additional info\n      return null;\n    }\n  } catch (error) {\n    console.error('Error refreshing access token:', error);\n    return null;\n  }\n}\n\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false);\n\n  const calendarInfo = [\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Charleston Warranty Calendar' }\n\n  ];\n\n  const handleSyncNow = async () => {\n    console.log('Manual sync button clicked for all calendars.');\n  \n    for (const calendar of calendarInfo) {\n      try {\n        // Sync Google Calendar events to Airtable\n        await syncGoogleCalendarToAirtable(\n          calendar.id, // Use each calendar's id\n          session,\n          () => supabase.auth.signOut(),\n          setAddedRecords,\n          setFailedRecords\n        );\n        \n        // Fetch Google Calendar events to update Airtable with Google Event details\n        const googleEvents = await fetchGoogleCalendarEvents(calendar.id, session);\n  \n        for (const googleEvent of googleEvents) {\n          // Ensure event has start and end times\n          const { start, end } = ensureTime(googleEvent);\n  \n          // Format the dates in the required format\n          const formattedStartDate = formatDateTime(start);\n          const formattedEndDate = formatDateTime(end);\n  \n          // Prepare the data to update Airtable with Google Calendar event details\n          const airtableUpdateRecord = {\n            fields: {\n              StartDate: formattedStartDate,  // Formatted Start Date\n              EndDate: formattedEndDate,      // Formatted End Date\n              'Event Title': googleEvent.summary || 'Untitled Event',  // Event Title\n              GoogleEventId: googleEvent.id,  // Google Calendar Event ID\n              Processed: true,  // Mark as processed\n            },\n          };\n  \n          // Update Airtable with Google Calendar event details\n          try {\n            const response = await fetch(`https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`, {\n              method: 'POST',\n              headers: {\n                'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(airtableUpdateRecord),\n            });\n  \n            const data = await response.json();\n  \n            if (response.ok) {\n              console.log(`Successfully updated Airtable with Google event: ${googleEvent.summary}`);\n            } else {\n              console.error(`Failed to update Airtable. Status: ${response.status}`);\n              console.error('Error Details:', data);\n            }\n          } catch (error) {\n            console.error(`Error updating Airtable with Google event details: ${error.message}`);\n          }\n        }\n      } catch (error) {\n        console.error('Error syncing Google Calendar to Airtable:', error);\n      }\n    }\n  };\n  \n  \n\n  // Check if access token is still valid\n  function isAccessTokenValid() {\n    const expirationTime = localStorage.getItem('expiration_time');\n    if (!expirationTime) {\n      return false;\n    }\n    return new Date().getTime() < expirationTime;\n  }\n\n  useEffect(() => {\n    if (session) {\n      const refreshTokenAsync = async () => {\n        const refresh_token = session.refresh_token;\n        const access_token = localStorage.getItem('access_token');\n\n        // Only refresh the token if it's expired\n        if (!isAccessTokenValid()) {\n          console.log('Access token expired, refreshing...');\n          const newAccessToken = await refreshAccessToken(refresh_token);\n          if (newAccessToken) {\n            await supabase.auth.setSession({ access_token: newAccessToken });\n          }\n        } else {\n          console.log('Access token is still valid, no need to refresh.');\n        }\n      };\n\n      refreshTokenAsync();\n    }\n  }, [session, supabase]);\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: '100%', margin: '0 auto' }}>\n          {session ? (\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <button onClick={handleSyncNow}>Sync Now</button> {/* Manual Sync Button */}\n              <div className=\"calendar-grid\">\n                {calendarInfo.map((calendar) => (\n                  <CalendarSection\n                    key={calendar.id}\n                    calendarId={calendar.id}\n                    calendarName={calendar.name}\n                    session={session}\n                    signOut={() => supabase.auth.signOut()}\n                    setAddedRecords={setAddedRecords}\n                    setFailedRecords={setFailedRecords}\n                    triggerSync={triggerSync}\n                    setTriggerSync={setTriggerSync}\n                    rateLimitHit={rateLimitHit} // Pass rateLimitHit as prop\n                    setRateLimitHit={setRateLimitHit} // Pass setter as prop\n                  />\n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n          ) : (\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({\n                provider: 'google',\n                options: {\n                  scopes: 'https://www.googleapis.com/auth/calendar',\n                  access_type: 'offline',  // Request offline access for refresh token\n                  prompt: 'consent'  // Force Google to show consent screen (ensures refresh token is issued)\n                }\n              })}>\n                Sign In With Google\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}