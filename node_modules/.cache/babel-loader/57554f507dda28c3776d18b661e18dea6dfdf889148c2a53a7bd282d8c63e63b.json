{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log('Attempting to create a new Google Calendar event:', event);\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?key=${process.env.REACT_APP_GOOGLE_API_KEY}`;\n  const newEvent = {\n    summary: event.title,\n    description: event.description,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('Google Calendar API Request URL:', url);\n  console.log('New event data to be sent to Google Calendar:', newEvent);\n\n  // Debounce the fetch request to prevent rapid duplicate requests\n  return debounce(async () => {\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + session.provider_token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newEvent)\n      });\n      console.log('Google Calendar API Response Status:', response.status);\n\n      // Capture rate limit info from headers\n      const remaining = response.headers.get('X-RateLimit-Remaining');\n      const limit = response.headers.get('X-RateLimit-Limit');\n      const reset = response.headers.get('X-RateLimit-Reset');\n      setRateLimitInfo({\n        remaining,\n        limit,\n        reset\n      });\n      const data = await response.json();\n      console.log('Google Calendar creation response:', data);\n      if (data.error) {\n        console.error('Error creating event:', data.error);\n        if (data.error.code === 401) {\n          console.error('Unauthorized - Logging out');\n          signOut(); // Logout if unauthorized\n        }\n\n        return null;\n      } else {\n        console.log('New event successfully created in Google Calendar:', data);\n        return data.id;\n      }\n    } catch (error) {\n      console.error('Error during fetch request to Google Calendar:', error);\n    }\n  }, 1000 // 1 second delay between API calls\n  );\n}\n\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log('Updating Airtable with new Google Event ID:', googleEventId);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId\n    }\n  };\n  console.log('Airtable update data:', updateData);\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    console.log('Airtable API Response Status:', response.status);\n    const data = await response.json();\n    console.log('Airtable API response for update:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID:', data);\n    }\n  } catch (error) {\n    console.error('Error during fetch request to update Airtable:', error);\n  }\n}\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching events from Airtable');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Airtable API Response Status:', response.status);\n    if (!response.ok) {\n      if (response.status === 429) {\n        // Handle rate limiting\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Fetched data from Airtable:', data);\n    return data.records.filter(record => record.fields['Calendar Event Name'] && record.fields['startDate'] && record.fields['endDate']) // Skip empty records\n    .map(record => ({\n      id: record.id,\n      title: record.fields['Calendar Event Name'] || \"Untitled Event\",\n      start: new Date(record.fields['StartDate']),\n      end: new Date(record.fields['endDate']),\n      description: record.fields['Billable Reason (If Billable)'] || '',\n      branch: record.fields['b'] || 'Unknown',\n      homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n      streetAddress: record.fields['Street Address'] || 'Unknown',\n      city: record.fields['City'] || 'Unknown',\n      state: record.fields['State'] || 'Unknown',\n      zipCode: record.fields['Zip Code'] || 'Unknown',\n      googleEventId: record.fields['GoogleEventId'] || null\n    }));\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  console.log(`Checking for duplicate events in Google Calendar for event: ${event.title}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}&key=${process.env.REACT_APP_GOOGLE_API_KEY}`;\n  try {\n    console.log('Google Calendar API Request URL for duplicate check:', url);\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token\n      }\n    });\n    console.log('Google Calendar API Response Status for duplicate check:', response.status);\n    const data = await response.json();\n    console.log('Fetched events from Google Calendar for duplicate check:', data);\n    if (data.items) {\n      const isDuplicate = data.items.some(existingEvent => existingEvent.summary === event.title && existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`);\n      console.log(`Is event \"${event.title}\" a duplicate? ${isDuplicate}`);\n      return isDuplicate;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error during duplicate check in Google Calendar:', error);\n    return false;\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Populating Google Calendar (${calendarName}) with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  if (!airtableEvents || airtableEvents.length === 0) {\n    console.log('No Airtable events found or failed to fetch events.');\n    return; // Exit early if there are no events to sync\n  }\n\n  console.log(`Found ${airtableEvents.length} events to process.`);\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    // Skip events where the branch is \"Unknown\" or does not match the calendar name\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\".`);\n      continue;\n    }\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n    console.log(`Processing event: \"${event.title}\" for Google Calendar sync.`);\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n    const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      console.log(`Failed to create Google Event for: \"${event.title}\".`);\n      failed.push(event.title);\n    }\n\n    // Introduce a delay of 1 second between requests\n    await sleep(1000);\n  }\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar (${calendarName}) with Airtable records. Added: ${added.length}, Failed: ${failed.length}`);\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  const [timeUntilNextSync, setTimeUntilNextSync] = useState(900000); // 15 minutes in milliseconds\n\n  useEffect(() => {\n    console.log('Session state:', session);\n    const syncEvents = () => {\n      const now = new Date();\n\n      // Check if a sync has occurred in the last 15 minutes\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n      if (session) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing Airtable events to Google Calendar (${calendarName})`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTimeUntilNextSync(900000); // Reset countdown to 15 minutes\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar (${calendarName}):`, error));\n      }\n    };\n\n    // Run syncEvents immediately when the component mounts\n    syncEvents();\n\n    // Set up an interval to run syncEvents every 15 minutes (900000 ms)\n    const intervalId = setInterval(syncEvents, 900000);\n\n    // Update countdown every second\n    const countdownInterval = setInterval(() => {\n      setTimeUntilNextSync(prev => Math.max(prev - 1000, 0)); // Decrease time until next sync\n    }, 1000);\n\n    // Clear the intervals when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n      clearInterval(countdownInterval);\n    };\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime]);\n\n  // Convert milliseconds to mm:ss format\n  const formatTime = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Next sync available in: \", formatTime(timeUntilNextSync)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLastSyncTime(null),\n      children: \"Manual Sync\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarSection, \"3KvL3eUJh+qTfAovVG1Un41dwX0=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    remaining: null,\n    limit: null,\n    reset: null\n  });\n\n  // Sort calendar info alphabetically by name\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Savannah'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return \"Good morning\";\n    } else if (currentHour < 18) {\n      return \"Good afternoon\";\n    } else {\n      return \"Good evening\";\n    }\n  };\n  const handleManualSync = async () => {\n    console.log('Manual sync initiated...');\n    if (!session) return;\n    for (const calendar of calendarInfo) {\n      console.log(`Syncing data for calendar: ${calendar.name}`);\n      await populateGoogleCalendarWithAirtableRecords(calendar.id, calendar.name, session, () => supabase.auth.signOut(), setAddedRecords, setFailedRecords, setRateLimitInfo);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          margin: \"0 auto\"\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              setRateLimitInfo: setRateLimitInfo\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rate-limit-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Google Calendar API Rate Limit Information:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this), rateLimitInfo.limit !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Limit: \", rateLimitInfo.limit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Remaining: \", rateLimitInfo.remaining]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Reset Time: \", new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No rate limit information available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleManualSync,\n            children: \"Sync Data Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar'\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"LrmoXDPuD0WbLefaZyCOpFogaJg=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","debounce","fn","delay","timeoutId","args","clearTimeout","setTimeout","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","console","log","provider_token","error","url","process","env","REACT_APP_GOOGLE_API_KEY","newEvent","summary","title","description","start","dateTime","toISOString","end","location","streetAddress","city","state","zipCode","response","fetch","method","headers","body","JSON","stringify","status","remaining","get","limit","reset","data","json","code","id","updateAirtableWithGoogleEventId","airtableRecordId","googleEventId","updateData","fields","GoogleEventId","fetchAirtableEvents","retryCount","maxRetries","ok","retryAfter","waitTime","parseInt","Math","pow","warn","Promise","resolve","Error","records","filter","record","map","Date","branch","homeownerName","checkForDuplicateEvent","items","isDuplicate","some","existingEvent","sleep","ms","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","airtableEvents","length","added","failed","toLowerCase","push","prev","CalendarSection","lastSyncTime","setLastSyncTime","timeUntilNextSync","setTimeUntilNextSync","syncEvents","now","then","catch","intervalId","setInterval","countdownInterval","max","clearInterval","formatTime","totalSeconds","floor","minutes","seconds","String","padStart","App","supabase","isLoading","addedRecords","failedRecords","rateLimitInfo","calendarInfo","name","sort","a","b","localeCompare","getGreeting","currentHour","getHours","handleManualSync","calendar","auth","width","margin","user","email","index","toLocaleTimeString","signInWithOAuth","provider","options","scopes"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log('Attempting to create a new Google Calendar event:', event);\n\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?key=${process.env.REACT_APP_GOOGLE_API_KEY}`;\n\n  const newEvent = {\n    summary: event.title,\n    description: event.description,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  console.log('Google Calendar API Request URL:', url);\n  console.log('New event data to be sent to Google Calendar:', newEvent);\n\n  // Debounce the fetch request to prevent rapid duplicate requests\n  return debounce(\n    async () => {\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Authorization': 'Bearer ' + session.provider_token,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newEvent)\n        });\n\n        console.log('Google Calendar API Response Status:', response.status);\n\n        // Capture rate limit info from headers\n        const remaining = response.headers.get('X-RateLimit-Remaining');\n        const limit = response.headers.get('X-RateLimit-Limit');\n        const reset = response.headers.get('X-RateLimit-Reset');\n        setRateLimitInfo({ remaining, limit, reset });\n\n        const data = await response.json();\n        console.log('Google Calendar creation response:', data);\n\n        if (data.error) {\n          console.error('Error creating event:', data.error);\n          if (data.error.code === 401) {\n            console.error('Unauthorized - Logging out');\n            signOut(); // Logout if unauthorized\n          }\n          return null;\n        } else {\n          console.log('New event successfully created in Google Calendar:', data);\n          return data.id;\n        }\n      } catch (error) {\n        console.error('Error during fetch request to Google Calendar:', error);\n      }\n    },\n    1000 // 1 second delay between API calls\n  );\n}\n\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log('Updating Airtable with new Google Event ID:', googleEventId);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId\n    }\n  };\n\n  console.log('Airtable update data:', updateData);\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n\n    console.log('Airtable API Response Status:', response.status);\n    const data = await response.json();\n    console.log('Airtable API response for update:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID:', data);\n    }\n  } catch (error) {\n    console.error('Error during fetch request to update Airtable:', error);\n  }\n}\n\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching events from Airtable');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    console.log('Airtable API Response Status:', response.status);\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        // Handle rate limiting\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n\n    const data = await response.json();\n    console.log('Fetched data from Airtable:', data);\n\n    return data.records\n      .filter(record => record.fields['Calendar Event Name'] && record.fields['startDate'] && record.fields['endDate']) // Skip empty records\n      .map(record => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || \"Untitled Event\",\n        start: new Date(record.fields['StartDate']),\n        end: new Date(record.fields['endDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null,\n      }));\n\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  console.log(`Checking for duplicate events in Google Calendar for event: ${event.title}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}&key=${process.env.REACT_APP_GOOGLE_API_KEY}`;\n\n  try {\n    console.log('Google Calendar API Request URL for duplicate check:', url);\n\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token,\n      },\n    });\n\n    console.log('Google Calendar API Response Status for duplicate check:', response.status);\n    const data = await response.json();\n    console.log('Fetched events from Google Calendar for duplicate check:', data);\n\n    if (data.items) {\n      const isDuplicate = data.items.some(existingEvent =>\n        existingEvent.summary === event.title &&\n        existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n      );\n      console.log(`Is event \"${event.title}\" a duplicate? ${isDuplicate}`);\n      return isDuplicate;\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error during duplicate check in Google Calendar:', error);\n    return false;\n  }\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Populating Google Calendar (${calendarName}) with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n\n  if (!airtableEvents || airtableEvents.length === 0) {\n    console.log('No Airtable events found or failed to fetch events.');\n    return; // Exit early if there are no events to sync\n  }\n\n  console.log(`Found ${airtableEvents.length} events to process.`);\n\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    // Skip events where the branch is \"Unknown\" or does not match the calendar name\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\".`);\n      continue;\n    }\n\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n\n    console.log(`Processing event: \"${event.title}\" for Google Calendar sync.`);\n\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n\n    const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      console.log(`Failed to create Google Event for: \"${event.title}\".`);\n      failed.push(event.title);\n    }\n\n    // Introduce a delay of 1 second between requests\n    await sleep(1000);\n  }\n\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar (${calendarName}) with Airtable records. Added: ${added.length}, Failed: ${failed.length}`);\n}\n\nfunction CalendarSection({ calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo }) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  const [timeUntilNextSync, setTimeUntilNextSync] = useState(900000); // 15 minutes in milliseconds\n\n  useEffect(() => {\n    console.log('Session state:', session);\n\n    const syncEvents = () => {\n      const now = new Date();\n\n      // Check if a sync has occurred in the last 15 minutes\n      if (lastSyncTime && (now - lastSyncTime) < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n\n      if (session) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId, \n          calendarName, \n          session, \n          signOut, \n          setAddedRecords, \n          setFailedRecords, \n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing Airtable events to Google Calendar (${calendarName})`);\n            setLastSyncTime(new Date());  // Update last sync time\n            setTimeUntilNextSync(900000);  // Reset countdown to 15 minutes\n          })\n          .catch(error => console.error(`Error syncing Airtable to Google Calendar (${calendarName}):`, error));\n      }\n    };\n\n    // Run syncEvents immediately when the component mounts\n    syncEvents();\n\n    // Set up an interval to run syncEvents every 15 minutes (900000 ms)\n    const intervalId = setInterval(syncEvents, 900000);\n\n    // Update countdown every second\n    const countdownInterval = setInterval(() => {\n      setTimeUntilNextSync(prev => Math.max(prev - 1000, 0)); // Decrease time until next sync\n    }, 1000);\n\n    // Clear the intervals when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n      clearInterval(countdownInterval);\n    };\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime]);\n\n  // Convert milliseconds to mm:ss format\n  const formatTime = (ms) => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n      <p>Next sync available in: {formatTime(timeUntilNextSync)}</p>\n      <button onClick={() => setLastSyncTime(null)}>Manual Sync</button>\n    </div>\n  );\n}\n\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({ remaining: null, limit: null, reset: null });\n\n  // Sort calendar info alphabetically by name\n  const calendarInfo = [\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Savannah' }\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return \"Good morning\";\n    } else if (currentHour < 18) {\n      return \"Good afternoon\";\n    } else {\n      return \"Good evening\";\n    }\n  };\n\n  const handleManualSync = async () => {\n    console.log('Manual sync initiated...');\n    if (!session) return;\n\n    for (const calendar of calendarInfo) {\n      console.log(`Syncing data for calendar: ${calendar.name}`);\n      await populateGoogleCalendarWithAirtableRecords(\n        calendar.id,\n        calendar.name,\n        session,\n        () => supabase.auth.signOut(),\n        setAddedRecords,\n        setFailedRecords,\n        setRateLimitInfo\n      );\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: \"100%\", margin: \"0 auto\" }}>\n          {session ?\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <div className=\"calendar-grid\">\n                {calendarInfo.map(calendar => (\n                  <CalendarSection\n                    key={calendar.id}\n                    calendarId={calendar.id}\n                    calendarName={calendar.name}\n                    session={session}\n                    signOut={() => supabase.auth.signOut()}\n                    setAddedRecords={setAddedRecords}\n                    setFailedRecords={setFailedRecords}\n                    setRateLimitInfo={setRateLimitInfo}\n                  />\n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"rate-limit-info\">\n                <h4>Google Calendar API Rate Limit Information:</h4>\n                {rateLimitInfo.limit !== null ? (\n                  <ul>\n                    <li>Limit: {rateLimitInfo.limit}</li>\n                    <li>Remaining: {rateLimitInfo.remaining}</li>\n                    <li>Reset Time: {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()}</li>\n                  </ul>\n                ) : (\n                  <p>No rate limit information available.</p>\n                )}\n              </div>\n              <button onClick={handleManualSync}>Sync Data Now</button>\n              <p></p>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n            :\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({ provider: 'google', options: { scopes: 'https://www.googleapis.com/auth/calendar' } })}>\n                Sign In With Google\n              </button>\n            </>\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,8BAA8B;;AAE/F;AAAA;AAAA;AACA,SAASC,QAAQ,CAACC,EAAE,EAAEC,KAAK,EAAE;EAC3B,IAAIC,SAAS;EACb,OAAO,YAAa;IAAA,kCAATC,IAAI;MAAJA,IAAI;IAAA;IACb,IAAID,SAAS,EAAE;MACbE,YAAY,CAACF,SAAS,CAAC;IACzB;IACAA,SAAS,GAAGG,UAAU,CAAC,MAAM;MAC3BL,EAAE,CAAC,GAAGG,IAAI,CAAC;IACb,CAAC,EAAEF,KAAK,CAAC;EACX,CAAC;AACH;AAEA,eAAeK,yBAAyB,CAACC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEC,gBAAgB,EAAE;EAC9FC,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEN,KAAK,CAAC;EAEvE,IAAI,CAACE,OAAO,CAACK,cAAc,EAAE;IAC3BF,OAAO,CAACG,KAAK,CAAC,gDAAgD,CAAC;IAC/DL,OAAO,EAAE;IACT,OAAO,IAAI;EACb;EAEA,MAAMM,GAAG,GAAI,oDAAmDR,UAAW,eAAcS,OAAO,CAACC,GAAG,CAACC,wBAAyB,EAAC;EAE/H,MAAMC,QAAQ,GAAG;IACfC,OAAO,EAAEd,KAAK,CAACe,KAAK;IACpBC,WAAW,EAAEhB,KAAK,CAACgB,WAAW;IAC9BC,KAAK,EAAE;MAAEC,QAAQ,EAAElB,KAAK,CAACiB,KAAK,CAACE,WAAW;IAAG,CAAC;IAC9CC,GAAG,EAAE;MAAEF,QAAQ,EAAElB,KAAK,CAACoB,GAAG,CAACD,WAAW;IAAG,CAAC;IAC1CE,QAAQ,EAAG,GAAErB,KAAK,CAACsB,aAAc,KAAItB,KAAK,CAACuB,IAAK,KAAIvB,KAAK,CAACwB,KAAM,KAAIxB,KAAK,CAACyB,OAAQ;EACpF,CAAC;EAEDpB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEG,GAAG,CAAC;EACpDJ,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEO,QAAQ,CAAC;;EAEtE;EACA,OAAOrB,QAAQ,CACb,YAAY;IACV,IAAI;MACF,MAAMkC,QAAQ,GAAG,MAAMC,KAAK,CAAClB,GAAG,EAAE;QAChCmB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAE,SAAS,GAAG3B,OAAO,CAACK,cAAc;UACnD,cAAc,EAAE;QAClB,CAAC;QACDuB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,QAAQ;MAC/B,CAAC,CAAC;MAEFR,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEoB,QAAQ,CAACO,MAAM,CAAC;;MAEpE;MACA,MAAMC,SAAS,GAAGR,QAAQ,CAACG,OAAO,CAACM,GAAG,CAAC,uBAAuB,CAAC;MAC/D,MAAMC,KAAK,GAAGV,QAAQ,CAACG,OAAO,CAACM,GAAG,CAAC,mBAAmB,CAAC;MACvD,MAAME,KAAK,GAAGX,QAAQ,CAACG,OAAO,CAACM,GAAG,CAAC,mBAAmB,CAAC;MACvD/B,gBAAgB,CAAC;QAAE8B,SAAS;QAAEE,KAAK;QAAEC;MAAM,CAAC,CAAC;MAE7C,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,EAAE;MAClClC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEgC,IAAI,CAAC;MAEvD,IAAIA,IAAI,CAAC9B,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAE8B,IAAI,CAAC9B,KAAK,CAAC;QAClD,IAAI8B,IAAI,CAAC9B,KAAK,CAACgC,IAAI,KAAK,GAAG,EAAE;UAC3BnC,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAC;UAC3CL,OAAO,EAAE,CAAC,CAAC;QACb;;QACA,OAAO,IAAI;MACb,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEgC,IAAI,CAAC;QACvE,OAAOA,IAAI,CAACG,EAAE;MAChB;IACF,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IACxE;EACF,CAAC,EACD,IAAI,CAAC;EAAA,CACN;AACH;;AAEA,eAAekC,+BAA+B,CAACC,gBAAgB,EAAEC,aAAa,EAAE;EAC9EvC,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEsC,aAAa,CAAC;EAEzE,MAAMnC,GAAG,GAAI,mEAAkEkC,gBAAiB,EAAC;EACjG,MAAME,UAAU,GAAG;IACjBC,MAAM,EAAE;MACNC,aAAa,EAAEH;IACjB;EACF,CAAC;EAEDvC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEuC,UAAU,CAAC;EAEhD,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAClB,GAAG,EAAE;MAChCmB,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QACP,eAAe,EAAE,2FAA2F;QAC5G,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACa,UAAU;IACjC,CAAC,CAAC;IAEFxC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEoB,QAAQ,CAACO,MAAM,CAAC;IAC7D,MAAMK,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,EAAE;IAClClC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEgC,IAAI,CAAC;IAEtD,IAAIA,IAAI,CAAC9B,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,+CAA+C,EAAE8B,IAAI,CAAC9B,KAAK,CAAC;IAC5E,CAAC,MAAM;MACLH,OAAO,CAACC,GAAG,CAAC,4DAA4D,EAAEgC,IAAI,CAAC;IACjF;EACF,CAAC,CAAC,OAAO9B,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;EACxE;AACF;AAEA,eAAewC,mBAAmB,GAAiB;EAAA,IAAhBC,UAAU,uEAAG,CAAC;EAC/C5C,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAE5C,MAAMG,GAAG,GAAI,iEAAgE;EAC7E,MAAMyC,UAAU,GAAG,CAAC;EAEpB,IAAI;IACF,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAClB,GAAG,EAAE;MAChCoB,OAAO,EAAE;QACP,eAAe,EAAE,2FAA2F;QAC5G,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEFxB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEoB,QAAQ,CAACO,MAAM,CAAC;IAE7D,IAAI,CAACP,QAAQ,CAACyB,EAAE,EAAE;MAChB,IAAIzB,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;QAC3B;QACA,MAAMmB,UAAU,GAAG1B,QAAQ,CAACG,OAAO,CAACM,GAAG,CAAC,aAAa,CAAC;QACtD,MAAMkB,QAAQ,GAAGD,UAAU,GAAGE,QAAQ,CAACF,UAAU,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEP,UAAU,CAAC,GAAG,IAAI;QAE1F5C,OAAO,CAACoD,IAAI,CAAE,kCAAiCJ,QAAS,OAAM,CAAC;QAE/D,IAAIJ,UAAU,GAAGC,UAAU,EAAE;UAC3B,MAAM,IAAIQ,OAAO,CAACC,OAAO,IAAI7D,UAAU,CAAC6D,OAAO,EAAEN,QAAQ,CAAC,CAAC;UAC3D,OAAOL,mBAAmB,CAACC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,MAAM;UACL,MAAM,IAAIW,KAAK,CAAC,sBAAsB,CAAC;QACzC;MACF,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAE,uBAAsBlC,QAAQ,CAACO,MAAO,EAAC,CAAC;MAC3D;IACF;IAEA,MAAMK,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,EAAE;IAClClC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEgC,IAAI,CAAC;IAEhD,OAAOA,IAAI,CAACuB,OAAO,CAChBC,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACjB,MAAM,CAAC,qBAAqB,CAAC,IAAIiB,MAAM,CAACjB,MAAM,CAAC,WAAW,CAAC,IAAIiB,MAAM,CAACjB,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAAA,CACjHkB,GAAG,CAACD,MAAM,KAAK;MACdtB,EAAE,EAAEsB,MAAM,CAACtB,EAAE;MACb1B,KAAK,EAAEgD,MAAM,CAACjB,MAAM,CAAC,qBAAqB,CAAC,IAAI,gBAAgB;MAC/D7B,KAAK,EAAE,IAAIgD,IAAI,CAACF,MAAM,CAACjB,MAAM,CAAC,WAAW,CAAC,CAAC;MAC3C1B,GAAG,EAAE,IAAI6C,IAAI,CAACF,MAAM,CAACjB,MAAM,CAAC,SAAS,CAAC,CAAC;MACvC9B,WAAW,EAAE+C,MAAM,CAACjB,MAAM,CAAC,+BAA+B,CAAC,IAAI,EAAE;MACjEoB,MAAM,EAAEH,MAAM,CAACjB,MAAM,CAAC,GAAG,CAAC,IAAI,SAAS;MACvCqB,aAAa,EAAEJ,MAAM,CAACjB,MAAM,CAAC,gBAAgB,CAAC,IAAI,SAAS;MAC3DxB,aAAa,EAAEyC,MAAM,CAACjB,MAAM,CAAC,gBAAgB,CAAC,IAAI,SAAS;MAC3DvB,IAAI,EAAEwC,MAAM,CAACjB,MAAM,CAAC,MAAM,CAAC,IAAI,SAAS;MACxCtB,KAAK,EAAEuC,MAAM,CAACjB,MAAM,CAAC,OAAO,CAAC,IAAI,SAAS;MAC1CrB,OAAO,EAAEsC,MAAM,CAACjB,MAAM,CAAC,UAAU,CAAC,IAAI,SAAS;MAC/CF,aAAa,EAAEmB,MAAM,CAACjB,MAAM,CAAC,eAAe,CAAC,IAAI;IACnD,CAAC,CAAC,CAAC;EAEP,CAAC,CAAC,OAAOtC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAE5D,IAAIyC,UAAU,GAAGC,UAAU,EAAE;MAC3B7C,OAAO,CAACC,GAAG,CAAE,0BAAyB2C,UAAU,GAAG,CAAE,OAAMC,UAAW,KAAI,CAAC;MAC3E,OAAOF,mBAAmB,CAACC,UAAU,GAAG,CAAC,CAAC;IAC5C,CAAC,MAAM;MACL,MAAMzC,KAAK,CAAC,CAAC;IACf;EACF;AACF;;AAEA,eAAe4D,sBAAsB,CAACpE,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAChEG,OAAO,CAACC,GAAG,CAAE,+DAA8DN,KAAK,CAACe,KAAM,EAAC,CAAC;EAEzF,MAAMN,GAAG,GAAI,oDAAmDR,UAAW,mBAAkBD,KAAK,CAACiB,KAAK,CAACE,WAAW,EAAG,YAAWnB,KAAK,CAACoB,GAAG,CAACD,WAAW,EAAG,QAAOT,OAAO,CAACC,GAAG,CAACC,wBAAyB,EAAC;EAEvM,IAAI;IACFP,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEG,GAAG,CAAC;IAExE,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAClB,GAAG,EAAE;MAChCoB,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAG3B,OAAO,CAACK;MACvC;IACF,CAAC,CAAC;IAEFF,OAAO,CAACC,GAAG,CAAC,0DAA0D,EAAEoB,QAAQ,CAACO,MAAM,CAAC;IACxF,MAAMK,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,EAAE;IAClClC,OAAO,CAACC,GAAG,CAAC,0DAA0D,EAAEgC,IAAI,CAAC;IAE7E,IAAIA,IAAI,CAAC+B,KAAK,EAAE;MACd,MAAMC,WAAW,GAAGhC,IAAI,CAAC+B,KAAK,CAACE,IAAI,CAACC,aAAa,IAC/CA,aAAa,CAAC1D,OAAO,KAAKd,KAAK,CAACe,KAAK,IACrCyD,aAAa,CAACnD,QAAQ,KAAM,GAAErB,KAAK,CAACsB,aAAc,KAAItB,KAAK,CAACuB,IAAK,KAAIvB,KAAK,CAACwB,KAAM,KAAIxB,KAAK,CAACyB,OAAQ,EAAC,CACrG;MACDpB,OAAO,CAACC,GAAG,CAAE,aAAYN,KAAK,CAACe,KAAM,kBAAiBuD,WAAY,EAAC,CAAC;MACpE,OAAOA,WAAW;IACpB;IAEA,OAAO,KAAK;EACd,CAAC,CAAC,OAAO9D,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;IACxE,OAAO,KAAK;EACd;AACF;AAEA,SAASiE,KAAK,CAACC,EAAE,EAAE;EACjB,OAAO,IAAIhB,OAAO,CAACC,OAAO,IAAI7D,UAAU,CAAC6D,OAAO,EAAEe,EAAE,CAAC,CAAC;AACxD;AAEA,eAAeC,yCAAyC,CAAC1E,UAAU,EAAE2E,YAAY,EAAE1E,OAAO,EAAEC,OAAO,EAAE0E,eAAe,EAAEC,gBAAgB,EAAE1E,gBAAgB,EAAE;EACxJC,OAAO,CAACC,GAAG,CAAE,+BAA8BsE,YAAa,4BAA2B,CAAC;EAEpF,MAAMG,cAAc,GAAG,MAAM/B,mBAAmB,EAAE;EAElD,IAAI,CAAC+B,cAAc,IAAIA,cAAc,CAACC,MAAM,KAAK,CAAC,EAAE;IAClD3E,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IAClE,OAAO,CAAC;EACV;;EAEAD,OAAO,CAACC,GAAG,CAAE,SAAQyE,cAAc,CAACC,MAAO,qBAAoB,CAAC;EAEhE,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,MAAM,GAAG,EAAE;EAEjB,KAAK,MAAMlF,KAAK,IAAI+E,cAAc,EAAE;IAClC;IACA,IAAI/E,KAAK,CAACkE,MAAM,CAACiB,WAAW,EAAE,KAAK,SAAS,IAAInF,KAAK,CAACkE,MAAM,CAACiB,WAAW,EAAE,KAAKP,YAAY,CAACO,WAAW,EAAE,EAAE;MACzG9E,OAAO,CAACC,GAAG,CAAE,mBAAkBN,KAAK,CAACe,KAAM,oBAAmBf,KAAK,CAACkE,MAAO,mBAAkBU,YAAa,uBAAsB,CAAC;MACjI;IACF;IAEA,IAAI5E,KAAK,CAAC4C,aAAa,EAAE;MACvBvC,OAAO,CAACC,GAAG,CAAE,kCAAiCN,KAAK,CAACe,KAAM,EAAC,CAAC;MAC5D;IACF;IAEAV,OAAO,CAACC,GAAG,CAAE,sBAAqBN,KAAK,CAACe,KAAM,6BAA4B,CAAC;IAE3E,MAAMuD,WAAW,GAAG,MAAMF,sBAAsB,CAACpE,KAAK,EAAEC,UAAU,EAAEC,OAAO,CAAC;IAC5E,IAAIoE,WAAW,EAAE;MACfjE,OAAO,CAACC,GAAG,CAAE,2BAA0BN,KAAK,CAACe,KAAM,gBAAe,CAAC;MACnEmE,MAAM,CAACE,IAAI,CAACpF,KAAK,CAACe,KAAK,CAAC;MACxB;IACF;IAEA,MAAM6B,aAAa,GAAG,MAAM7C,yBAAyB,CAACC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEC,gBAAgB,CAAC;IAC5G,IAAIwC,aAAa,EAAE;MACjBvC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEsC,aAAa,CAAC;MAC1D,MAAMF,+BAA+B,CAAC1C,KAAK,CAACyC,EAAE,EAAEG,aAAa,CAAC;MAC9DqC,KAAK,CAACG,IAAI,CAACpF,KAAK,CAACe,KAAK,CAAC;IACzB,CAAC,MAAM;MACLV,OAAO,CAACC,GAAG,CAAE,uCAAsCN,KAAK,CAACe,KAAM,IAAG,CAAC;MACnEmE,MAAM,CAACE,IAAI,CAACpF,KAAK,CAACe,KAAK,CAAC;IAC1B;;IAEA;IACA,MAAM0D,KAAK,CAAC,IAAI,CAAC;EACnB;EAEAI,eAAe,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGJ,KAAK,CAAC,CAAC;EAC5CH,gBAAgB,CAACO,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGH,MAAM,CAAC,CAAC;EAE9C7E,OAAO,CAACC,GAAG,CAAE,wCAAuCsE,YAAa,mCAAkCK,KAAK,CAACD,MAAO,aAAYE,MAAM,CAACF,MAAO,EAAC,CAAC;AAC9I;AAEA,SAASM,eAAe,OAAsG;EAAA;EAAA,IAArG;IAAErF,UAAU;IAAE2E,YAAY;IAAE1E,OAAO;IAAEC,OAAO;IAAE0E,eAAe;IAAEC,gBAAgB;IAAE1E;EAAiB,CAAC;EAC1H,MAAM,CAACmF,YAAY,EAAEC,eAAe,CAAC,GAAGrG,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACsG,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;EAEpEC,SAAS,CAAC,MAAM;IACdiB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,OAAO,CAAC;IAEtC,MAAMyF,UAAU,GAAG,MAAM;MACvB,MAAMC,GAAG,GAAG,IAAI3B,IAAI,EAAE;;MAEtB;MACA,IAAIsB,YAAY,IAAKK,GAAG,GAAGL,YAAY,GAAI,MAAM,EAAE;QACjDlF,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;QACpE;MACF;MAEA,IAAIJ,OAAO,EAAE;QACX,IAAI,CAACA,OAAO,CAACK,cAAc,EAAE;UAC3BF,OAAO,CAACG,KAAK,CAAC,4CAA4C,CAAC;UAC3DL,OAAO,EAAE;UACT;QACF;QAEAwE,yCAAyC,CACvC1E,UAAU,EACV2E,YAAY,EACZ1E,OAAO,EACPC,OAAO,EACP0E,eAAe,EACfC,gBAAgB,EAChB1E,gBAAgB,CACjB,CACEyF,IAAI,CAAC,MAAM;UACVxF,OAAO,CAACC,GAAG,CAAE,wDAAuDsE,YAAa,GAAE,CAAC;UACpFY,eAAe,CAAC,IAAIvB,IAAI,EAAE,CAAC,CAAC,CAAE;UAC9ByB,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAE;QACjC,CAAC,CAAC,CACDI,KAAK,CAACtF,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAE,8CAA6CoE,YAAa,IAAG,EAAEpE,KAAK,CAAC,CAAC;MACzG;IACF,CAAC;;IAED;IACAmF,UAAU,EAAE;;IAEZ;IACA,MAAMI,UAAU,GAAGC,WAAW,CAACL,UAAU,EAAE,MAAM,CAAC;;IAElD;IACA,MAAMM,iBAAiB,GAAGD,WAAW,CAAC,MAAM;MAC1CN,oBAAoB,CAACL,IAAI,IAAI9B,IAAI,CAAC2C,GAAG,CAACb,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAM;MACXc,aAAa,CAACJ,UAAU,CAAC;MACzBI,aAAa,CAACF,iBAAiB,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,CAAC/F,OAAO,EAAEC,OAAO,EAAEF,UAAU,EAAE2E,YAAY,EAAEC,eAAe,EAAEC,gBAAgB,EAAE1E,gBAAgB,EAAEmF,YAAY,CAAC,CAAC;;EAEnH;EACA,MAAMa,UAAU,GAAI1B,EAAE,IAAK;IACzB,MAAM2B,YAAY,GAAG9C,IAAI,CAAC+C,KAAK,CAAC5B,EAAE,GAAG,IAAI,CAAC;IAC1C,MAAM6B,OAAO,GAAGhD,IAAI,CAAC+C,KAAK,CAACD,YAAY,GAAG,EAAE,CAAC;IAC7C,MAAMG,OAAO,GAAGH,YAAY,GAAG,EAAE;IACjC,OAAQ,GAAEI,MAAM,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACD,OAAO,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;EAClF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,eAAe;IAAA,wBAC5B;MAAA,UAAK9B;IAAY;MAAA;MAAA;MAAA;IAAA,QAAM,eACvB;MAAA,WAAG,0BAAwB,EAACwB,UAAU,CAACX,iBAAiB,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,eAC9D;MAAQ,OAAO,EAAE,MAAMD,eAAe,CAAC,IAAI,CAAE;MAAA,UAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV;AAAC,GA1EQF,eAAe;AAAA,KAAfA,eAAe;AA4ExB,SAASqB,GAAG,GAAG;EAAA;EACb,MAAMzG,OAAO,GAAGb,UAAU,EAAE;EAC5B,MAAMuH,QAAQ,GAAGtH,iBAAiB,EAAE;EACpC,MAAM;IAAEuH;EAAU,CAAC,GAAGtH,iBAAiB,EAAE;EAEzC,MAAM,CAACuH,YAAY,EAAEjC,eAAe,CAAC,GAAG1F,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC4H,aAAa,EAAEjC,gBAAgB,CAAC,GAAG3F,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC6H,aAAa,EAAE5G,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC;IAAE+C,SAAS,EAAE,IAAI;IAAEE,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;;EAEjG;EACA,MAAM4E,YAAY,GAAG,CACnB;IAAExE,EAAE,EAAE,8FAA8F;IAAEyE,IAAI,EAAE;EAAW,CAAC,CACzH,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACF,IAAI,CAACI,aAAa,CAACD,CAAC,CAACH,IAAI,CAAC,CAAC;EAE9C,MAAMK,WAAW,GAAG,MAAM;IACxB,MAAMC,WAAW,GAAG,IAAIvD,IAAI,EAAE,CAACwD,QAAQ,EAAE;IACzC,IAAID,WAAW,GAAG,EAAE,EAAE;MACpB,OAAO,cAAc;IACvB,CAAC,MAAM,IAAIA,WAAW,GAAG,EAAE,EAAE;MAC3B,OAAO,gBAAgB;IACzB,CAAC,MAAM;MACL,OAAO,cAAc;IACvB;EACF,CAAC;EAED,MAAME,gBAAgB,GAAG,YAAY;IACnCrH,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,IAAI,CAACJ,OAAO,EAAE;IAEd,KAAK,MAAMyH,QAAQ,IAAIV,YAAY,EAAE;MACnC5G,OAAO,CAACC,GAAG,CAAE,8BAA6BqH,QAAQ,CAACT,IAAK,EAAC,CAAC;MAC1D,MAAMvC,yCAAyC,CAC7CgD,QAAQ,CAAClF,EAAE,EACXkF,QAAQ,CAACT,IAAI,EACbhH,OAAO,EACP,MAAM0G,QAAQ,CAACgB,IAAI,CAACzH,OAAO,EAAE,EAC7B0E,eAAe,EACfC,gBAAgB,EAChB1E,gBAAgB,CACjB;IACH;EACF,CAAC;EAED,IAAIyG,SAAS,EAAE;IACb,oBAAO;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM;EAC9B;EAEA,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAK,SAAS,EAAC,WAAW;MAAA,wBACxB;QAAA,UAAI;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAK,eAC1B;QAAK,KAAK,EAAE;UAAEgB,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAS,CAAE;QAAA,UAC7C5H,OAAO,gBACN;UAAA,wBACE;YAAA,WAAKqH,WAAW,EAAE,EAAC,GAAC,EAACrH,OAAO,CAAC6H,IAAI,CAACC,KAAK;UAAA;YAAA;YAAA;YAAA;UAAA,QAAM,eAC7C;YAAA;YAAA;YAAA;UAAA,QAAM,eACN;YAAK,SAAS,EAAC,eAAe;YAAA,UAC3Bf,YAAY,CAACjD,GAAG,CAAC2D,QAAQ,iBACxB,QAAC,eAAe;cAEd,UAAU,EAAEA,QAAQ,CAAClF,EAAG;cACxB,YAAY,EAAEkF,QAAQ,CAACT,IAAK;cAC5B,OAAO,EAAEhH,OAAQ;cACjB,OAAO,EAAE,MAAM0G,QAAQ,CAACgB,IAAI,CAACzH,OAAO,EAAG;cACvC,eAAe,EAAE0E,eAAgB;cACjC,gBAAgB,EAAEC,gBAAiB;cACnC,gBAAgB,EAAE1E;YAAiB,GAP9BuH,QAAQ,CAAClF,EAAE;cAAA;cAAA;cAAA;YAAA,QASnB;UAAC;YAAA;YAAA;YAAA;UAAA,QACE,eACN;YAAK,SAAS,EAAC,iBAAiB;YAAA,wBAC9B;cAAA,UAAI;YAAe;cAAA;cAAA;cAAA;YAAA,QAAK,eACxB;cAAK,SAAS,EAAC,mBAAmB;cAAA,wBAChC;gBAAK,SAAS,EAAC,eAAe;gBAAA,wBAC5B;kBAAA,UAAI;gBAA2B;kBAAA;kBAAA;kBAAA;gBAAA,QAAK,EACnCqE,YAAY,CAAC9B,MAAM,GAAG,CAAC,gBACtB;kBAAA,UACG8B,YAAY,CAAC9C,GAAG,CAAC,CAACD,MAAM,EAAEkE,KAAK,kBAC9B;oBAAA,UAAiBlE;kBAAM,GAAdkE,KAAK;oBAAA;oBAAA;oBAAA;kBAAA,QACf;gBAAC;kBAAA;kBAAA;kBAAA;gBAAA,QACC,gBAEL;kBAAA,UAAG;gBAAiB;kBAAA;kBAAA;kBAAA;gBAAA,QACrB;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACG,eACN;gBAAK,SAAS,EAAC,gBAAgB;gBAAA,wBAC7B;kBAAA,UAAI;gBAAsB;kBAAA;kBAAA;kBAAA;gBAAA,QAAK,EAC9BlB,aAAa,CAAC/B,MAAM,GAAG,CAAC,gBACvB;kBAAA,UACG+B,aAAa,CAAC/C,GAAG,CAAC,CAACD,MAAM,EAAEkE,KAAK,kBAC/B;oBAAA,UAAiBlE;kBAAM,GAAdkE,KAAK;oBAAA;oBAAA;oBAAA;kBAAA,QACf;gBAAC;kBAAA;kBAAA;kBAAA;gBAAA,QACC,gBAEL;kBAAA,UAAG;gBAAkB;kBAAA;kBAAA;kBAAA;gBAAA,QACtB;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACG;YAAA;cAAA;cAAA;cAAA;YAAA,QACF;UAAA;YAAA;YAAA;YAAA;UAAA,QACF,eACN;YAAK,SAAS,EAAC,iBAAiB;YAAA,wBAC9B;cAAA,UAAI;YAA2C;cAAA;cAAA;cAAA;YAAA,QAAK,EACnDjB,aAAa,CAAC5E,KAAK,KAAK,IAAI,gBAC3B;cAAA,wBACE;gBAAA,WAAI,SAAO,EAAC4E,aAAa,CAAC5E,KAAK;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAM,eACrC;gBAAA,WAAI,aAAW,EAAC4E,aAAa,CAAC9E,SAAS;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAM,eAC7C;gBAAA,WAAI,cAAY,EAAC,IAAI+B,IAAI,CAAC+C,aAAa,CAAC3E,KAAK,GAAG,IAAI,CAAC,CAAC6F,kBAAkB,EAAE;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAM;YAAA;cAAA;cAAA;cAAA;YAAA,QAC7E,gBAEL;cAAA,UAAG;YAAoC;cAAA;cAAA;cAAA;YAAA,QACxC;UAAA;YAAA;YAAA;YAAA;UAAA,QACG,eACN;YAAQ,OAAO,EAAER,gBAAiB;YAAA,UAAC;UAAa;YAAA;YAAA;YAAA;UAAA,QAAS,eACzD;YAAA;YAAA;YAAA;UAAA,QAAO,eACP;YAAQ,OAAO,EAAE,MAAMd,QAAQ,CAACgB,IAAI,CAACzH,OAAO,EAAG;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAS;QAAA,gBAChE,gBAEH;UAAA,uBACE;YAAQ,OAAO,EAAE,MAAMyG,QAAQ,CAACgB,IAAI,CAACO,eAAe,CAAC;cAAEC,QAAQ,EAAE,QAAQ;cAAEC,OAAO,EAAE;gBAAEC,MAAM,EAAE;cAA2C;YAAE,CAAC,CAAE;YAAA,UAAC;UAE/I;YAAA;YAAA;YAAA;UAAA;QAAS;MACR;QAAA;QAAA;QAAA;MAAA,QAED;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,IA9HQ3B,GAAG;EAAA,QACMtH,UAAU,EACTC,iBAAiB,EACZC,iBAAiB;AAAA;AAAA,MAHhCoH,GAAG;AAgIZ,eAAeA,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}