{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function refreshAccessToken(refresh_token) {\n  const tokenURL = 'https://oauth2.googleapis.com/token';\n  const params = new URLSearchParams();\n  params.append('client_id', 'YOUR_CLIENT_ID');\n  params.append('client_secret', 'YOUR_CLIENT_SECRET');\n  params.append('refresh_token', refresh_token);\n  params.append('grant_type', 'refresh_token');\n  try {\n    const response = await fetch(tokenURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: params.toString()\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Access token refreshed:', data.access_token);\n      return data.access_token;\n    } else {\n      console.error('Failed to refresh access token:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error refreshing access token:', error);\n    return null;\n  }\n}\nconst accessToken = await refreshAccessToken(refresh_token);\nif (accessToken) {\n  supabase.auth.setSession({\n    access_token: accessToken\n  });\n}\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  // Final duplicate check before creating\n  const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n  if (existingGoogleEventId) {\n    console.log('Duplicate event detected in final check, skipping creation:', existingGoogleEventId);\n    return existingGoogleEventId;\n  }\n\n  // Proceed with event creation\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('Event data being sent to Google Calendar API:', updatedEvent);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedEvent)\n    });\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true);\n      return null;\n    }\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut) {\n  let setRateLimitInfo = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : () => {};\n  let setRateLimitHit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : () => {};\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedEvent)\n    });\n\n    // Check for rate limit and handle it\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error && data.error.code === 401) {\n        signOut(); // Handle invalid token by signing out\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request in updateGoogleCalendarEvent:', error);\n    return null;\n  }\n}\nasync function updateAirtableWithGoogleEventIdAndProcessed(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId} and marking as processed`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=NOT({GoogleEventId} = BLANK())`;\n  const updateData = {\n    fields: {\n      Processed: true,\n      // Mark as processed\n      LastUpdated: new Date().toISOString() // Optional field to track last update\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (!response.ok) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n      throw new Error(data.error);\n    }\n    console.log('Airtable record successfully updated with Google Event ID and marked as processed:', data);\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function lockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: true // Mark record as being processed\n    }\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    console.log(`Locked record ${airtableRecordId} for processing`);\n  } catch (error) {\n    console.error(`Failed to lock record ${airtableRecordId}`, error);\n  }\n}\nasync function unlockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fields: {}\n      }) // Empty body if you are no longer updating any fields\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      console.error('Error unlocking Airtable record:', data.error || data);\n      throw new Error(data.error || 'Unknown error');\n    }\n    console.log(`Unlocked record ${airtableRecordId} after processing`);\n  } catch (error) {\n    console.error(`Failed to unlock record ${airtableRecordId}`, error);\n  }\n}\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true // Mark as processed\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching unprocessed events from Airtable...');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=OR(NOT({Processed}), {GoogleEventId} != BLANK())`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return [];\n    }\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n    const filteredRecords = data.records.filter(record => {\n      // Ensure event has a name, start and end dates\n      return record.fields['Calendar Event Name'] && record.fields['StartDate'] && record.fields['EndDate'];\n    }).map(record => ({\n      id: record.id,\n      title: record.fields['Calendar Event Name'] || 'Untitled Event',\n      start: new Date(record.fields['StartDate']),\n      end: new Date(record.fields['EndDate']),\n      description: record.fields['Billable Reason (If Billable)'] || '',\n      branch: record.fields['b'] || 'Unknown',\n      homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n      materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n      streetAddress: record.fields['Street Address'] || 'Unknown',\n      city: record.fields['City'] || 'Unknown',\n      state: record.fields['State'] || 'Unknown',\n      zipCode: record.fields['Zip Code'] || 'Unknown',\n      googleEventId: record.fields['GoogleEventId'] || null,\n      processed: record.fields['Processed'] || false // Track the Processed field\n    }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    return [];\n  }\n}\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n      const existingEvent = data.items.find(existingEvent => existingEvent.summary === event.title &&\n      // Match title\n      existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}` // Match location\n      );\n\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n  return null;\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo, rateLimitHit, setRateLimitHit) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    if (rateLimitHit) {\n      console.log(`Rate limit hit. Stopping further processing.`);\n      break;\n    }\n    console.log(`Processing event \"${event.title}\"...`);\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch mismatch.`);\n      continue;\n    }\n\n    // Lock the record to prevent it from being processed by another process\n    await lockAirtableRecord(event.id);\n    try {\n      if (event.googleEventId) {\n        console.log(`Event \"${event.title}\" already has a GoogleEventId: ${event.googleEventId}. Verifying in Google Calendar...`);\n        const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n\n        // Only proceed if existingGoogleEventId is not null\n        if (existingGoogleEventId) {\n          const updatedGoogleEventId = await updateGoogleCalendarEvent(event, calendarId, existingGoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n          if (updatedGoogleEventId) {\n            added.push(event.title);\n            await updateAirtableWithProcessed(event.id); // Mark as processed\n          } else {\n            failed.push(event.title);\n          }\n        } else {\n          console.log(`No duplicate found for event \"${event.title}\". Skipping update.`);\n        }\n      } else {\n        // Check Google Calendar for an existing event to avoid duplicates\n        const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit);\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventIdAndProcessed(event.id, googleEventId);\n          added.push(event.title);\n        } else {\n          failed.push(event.title);\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing event \"${event.title}\":`, error);\n      failed.push(event.title);\n    }\n    await unlockAirtableRecord(event.id); // Unlock the record after processing\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo,\n    triggerSync,\n    setTriggerSync\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTriggerSync(false); // Reset the triggerSync after sync\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error));\n      }\n    };\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents(); // Call syncEvents once here, no recursion\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 518,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarSection, \"angMAHcm2jE5suJWSu8EeeNlGl0=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false); // Move this here\n\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Savannah'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          margin: '0 auto'\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSyncNow,\n            children: \"Sync Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              triggerSync: triggerSync,\n              setTriggerSync: setTriggerSync,\n              rateLimitHit: rateLimitHit // Pass rateLimitHit as prop\n              ,\n              setRateLimitHit: setRateLimitHit // Pass setter as prop\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 592,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 596,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 594,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 600,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 591,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 604,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 608,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 612,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar',\n                access_type: 'offline',\n                // Request offline access for refresh token\n                prompt: 'consent' // Force Google to show consent screen (ensures refresh token is issued)\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 5\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 561,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"x16Jt7a/Fse3qsZ6QTrd2TFTOBs=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App; // Ensure default export\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","refreshAccessToken","refresh_token","tokenURL","params","URLSearchParams","append","response","fetch","method","headers","body","toString","data","json","ok","console","log","access_token","error","accessToken","supabase","auth","setSession","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","setRateLimitHit","existingGoogleEventId","checkForDuplicateEvent","url","updatedEvent","summary","title","description","location","homeownerName","materialsNeeded","start","dateTime","toISOString","end","streetAddress","city","state","zipCode","Authorization","provider_token","JSON","stringify","status","id","updateGoogleCalendarEvent","eventId","remaining","get","limit","reset","code","updateAirtableWithGoogleEventIdAndProcessed","airtableRecordId","googleEventId","updateData","fields","Processed","LastUpdated","Date","Error","lockAirtableRecord","Processing","unlockAirtableRecord","updateAirtableWithProcessed","fetchAirtableEvents","retryCount","filteredRecords","records","filter","record","map","branch","processed","length","items","existingEvent","find","sleep","ms","Promise","resolve","setTimeout","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","rateLimitHit","airtableEvents","added","failed","toLowerCase","updatedGoogleEventId","push","prev","CalendarSection","triggerSync","setTriggerSync","lastSyncTime","setLastSyncTime","syncEvents","now","then","catch","App","isLoading","addedRecords","failedRecords","calendarInfo","name","sort","a","b","localeCompare","handleSyncNow","getGreeting","currentHour","getHours","width","margin","user","email","calendar","index","signInWithOAuth","provider","options","scopes","access_type","prompt"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\nasync function refreshAccessToken(refresh_token) {\n  const tokenURL = 'https://oauth2.googleapis.com/token';\n  const params = new URLSearchParams();\n  params.append('client_id', 'YOUR_CLIENT_ID');\n  params.append('client_secret', 'YOUR_CLIENT_SECRET');\n  params.append('refresh_token', refresh_token);\n  params.append('grant_type', 'refresh_token');\n\n  try {\n    const response = await fetch(tokenURL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: params.toString(),\n    });\n\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Access token refreshed:', data.access_token);\n      return data.access_token;\n    } else {\n      console.error('Failed to refresh access token:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error refreshing access token:', error);\n    return null;\n  }\n}\n\nconst accessToken = await refreshAccessToken(refresh_token);\nif (accessToken) {\n  supabase.auth.setSession({ access_token: accessToken });\n}\n\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  // Final duplicate check before creating\n  const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n  if (existingGoogleEventId) {\n    console.log('Duplicate event detected in final check, skipping creation:', existingGoogleEventId);\n    return existingGoogleEventId;\n  }\n\n  // Proceed with event creation\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n  \n\n  console.log('Event data being sent to Google Calendar API:', updatedEvent);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedEvent),\n    });\n\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true);\n      return null;\n    }\n\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\n\nasync function updateGoogleCalendarEvent(\n  event,\n  calendarId,\n  eventId,\n  session,\n  signOut,\n  setRateLimitInfo = () => {}, // Default empty function\n  setRateLimitHit = () => {} // Default empty function\n) {  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nlocation: ${event.location}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedEvent),\n    });\n\n    // Check for rate limit and handle it\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error && data.error.code === 401) {\n        signOut(); // Handle invalid token by signing out\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request in updateGoogleCalendarEvent:', error);\n    return null;\n  }\n}\n\n\nasync function updateAirtableWithGoogleEventIdAndProcessed(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId} and marking as processed`);\n  \n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=NOT({GoogleEventId} = BLANK())`;\n  const updateData = {\n    fields: {\n      Processed: true,  // Mark as processed\n      LastUpdated: new Date().toISOString() // Optional field to track last update\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (!response.ok) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n      throw new Error(data.error);\n    }\n\n    console.log('Airtable record successfully updated with Google Event ID and marked as processed:', data);\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\nasync function lockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: true, // Mark record as being processed\n    },\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n    console.log(`Locked record ${airtableRecordId} for processing`);\n  } catch (error) {\n    console.error(`Failed to lock record ${airtableRecordId}`, error);\n  }\n}\n\nasync function unlockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ fields: {} }), // Empty body if you are no longer updating any fields\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      console.error('Error unlocking Airtable record:', data.error || data);\n      throw new Error(data.error || 'Unknown error');\n    }\n\n    console.log(`Unlocked record ${airtableRecordId} after processing`);\n  } catch (error) {\n    console.error(`Failed to unlock record ${airtableRecordId}`, error);\n  }\n}\n\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true,  // Mark as processed\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching unprocessed events from Airtable...');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=OR(NOT({Processed}), {GoogleEventId} != BLANK())`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return [];\n    }\n\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n\n    const filteredRecords = data.records\n      .filter((record) => {\n        // Ensure event has a name, start and end dates\n        return record.fields['Calendar Event Name'] && record.fields['StartDate'] && record.fields['EndDate'];\n      })\n      .map((record) => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || 'Untitled Event',\n        start: new Date(record.fields['StartDate']),\n        end: new Date(record.fields['EndDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null,\n        processed: record.fields['Processed'] || false,  // Track the Processed field\n      }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    return [];\n  }\n}\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n    \n    if (data.items && data.items.length > 0) {\n      const existingEvent = data.items.find(\n        (existingEvent) =>\n          existingEvent.summary === event.title && // Match title\n          existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}` // Match location\n      );\n\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n\n  return null;\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function populateGoogleCalendarWithAirtableRecords(\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  rateLimitHit,\n  setRateLimitHit\n) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    if (rateLimitHit) {\n      console.log(`Rate limit hit. Stopping further processing.`);\n      break;\n    }\n\n    console.log(`Processing event \"${event.title}\"...`);\n\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch mismatch.`);\n      continue;\n    }\n\n    // Lock the record to prevent it from being processed by another process\n    await lockAirtableRecord(event.id);\n\n    try {\n      if (event.googleEventId) {\n        console.log(`Event \"${event.title}\" already has a GoogleEventId: ${event.googleEventId}. Verifying in Google Calendar...`);\n\n        const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n\n        // Only proceed if existingGoogleEventId is not null\n        if (existingGoogleEventId) {\n          const updatedGoogleEventId = await updateGoogleCalendarEvent(\n            event,\n            calendarId,\n            existingGoogleEventId,\n            session,\n            signOut,\n            setRateLimitInfo,\n            setRateLimitHit\n          );\n\n          if (updatedGoogleEventId) {\n            added.push(event.title);\n            await updateAirtableWithProcessed(event.id); // Mark as processed\n          } else {\n            failed.push(event.title);\n          }\n        } else {\n          console.log(`No duplicate found for event \"${event.title}\". Skipping update.`);\n        }\n      } else {\n        // Check Google Calendar for an existing event to avoid duplicates\n        const googleEventId = await createGoogleCalendarEvent(\n          event,\n          calendarId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventIdAndProcessed(event.id, googleEventId);\n          added.push(event.title);\n        } else {\n          failed.push(event.title);\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing event \"${event.title}\":`, error);\n      failed.push(event.title);\n    }\n\n    await unlockAirtableRecord(event.id); // Unlock the record after processing\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords((prev) => [...prev, ...added]);\n  setFailedRecords((prev) => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\n\n\n\nfunction CalendarSection({\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  triggerSync,\n  setTriggerSync\n}) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n  \n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n  \n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId,\n          calendarName,\n          session,\n          signOut,\n          setAddedRecords,\n          setFailedRecords,\n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n            setLastSyncTime(new Date()); // Update last sync time\n            setTriggerSync(false); // Reset the triggerSync after sync\n          })\n          .catch((error) =>\n            console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error)\n          );\n      }\n    };\n  \n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents(); // Call syncEvents once here, no recursion\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  \n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n    </div>\n  );\n}\n\nfunction App() {\n  const session = useSession();\n\n  \n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false); // Move this here\n\n  const calendarInfo = [\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Savannah' }\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: '100%', margin: '0 auto' }}>\n          {session ? (\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <button onClick={handleSyncNow}>Sync Now</button> {/* Manual Sync Button */}\n              <div className=\"calendar-grid\">\n                {calendarInfo.map((calendar) => (\n                  <CalendarSection\n                  key={calendar.id}\n                  calendarId={calendar.id}\n                  calendarName={calendar.name}\n                  session={session}\n                  signOut={() => supabase.auth.signOut()}\n                  setAddedRecords={setAddedRecords}\n                  setFailedRecords={setFailedRecords}\n                  triggerSync={triggerSync}\n                  setTriggerSync={setTriggerSync}\n                  rateLimitHit={rateLimitHit} // Pass rateLimitHit as prop\n                  setRateLimitHit={setRateLimitHit} // Pass setter as prop\n                />\n                \n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n             \n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n          ) : (\n            <>\n    <button onClick={() => supabase.auth.signInWithOAuth({\n  provider: 'google',\n  options: {\n    scopes: 'https://www.googleapis.com/auth/calendar',\n    access_type: 'offline',  // Request offline access for refresh token\n    prompt: 'consent'  // Force Google to show consent screen (ensures refresh token is issued)\n  }\n})}>\n  Sign In With Google\n</button>\n\n\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; // Ensure default export\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}