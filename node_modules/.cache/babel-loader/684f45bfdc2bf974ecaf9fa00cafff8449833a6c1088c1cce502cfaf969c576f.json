{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    });\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedEvent)\n    });\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error.code === 401) {\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId}`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId // Update Airtable record with GoogleEventId\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true // Mark as processed\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching unprocessed events from Airtable...');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=NOT({Processed})`;\n  const maxRetries = 1;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n    const filteredRecords = data.records.filter(record => {\n      const hasEventName = !!record.fields['Calendar Event Name'];\n      const hasStartDate = !!record.fields['StartDate'];\n      const hasEndDate = !!record.fields['EndDate'];\n      if (!hasEventName || !hasStartDate || !hasEndDate) {\n        console.warn(`Record filtered out: ${record.id}`);\n        return false;\n      }\n      return true;\n    }).map(record => ({\n      id: record.id,\n      title: record.fields['Calendar Event Name'] || 'Untitled Event',\n      start: new Date(record.fields['StartDate']),\n      end: new Date(record.fields['EndDate']),\n      description: record.fields['Billable Reason (If Billable)'] || '',\n      branch: record.fields['b'] || 'Unknown',\n      homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n      materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n      streetAddress: record.fields['Street Address'] || 'Unknown',\n      city: record.fields['City'] || 'Unknown',\n      state: record.fields['State'] || 'Unknown',\n      zipCode: record.fields['Zip Code'] || 'Unknown',\n      issuePictures: record.fields['Picture(s) of Issue'] ? record.fields['Picture(s) of Issue'].map(pic => pic.url).join(', ') : 'No pictures provided',\n      completedPictures: record.fields['Completed Pictures'] ? record.fields['Completed Pictures'].map(pic => pic.url).join(', ') : 'No pictures provided',\n      googleEventId: record.fields['GoogleEventId'] || null,\n      processed: record.fields['Processed'] || false // Track the Processed field\n    }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    if (data.items) {\n      const existingEvent = data.items.find(existingEvent => existingEvent.summary === event.title && existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`);\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function checkIfAirtableRecordExists(eventTitle, eventStart, eventEnd) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND({Calendar Event Name}=\"${eventTitle}\", {StartDate}=\"${eventStart.toISOString()}\", {EndDate}=\"${eventEnd.toISOString()}\")`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    return data.records.length > 0 ? data.records[0] : null;\n  } catch (error) {\n    console.error('Error checking Airtable for existing record:', error);\n    return null;\n  }\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo, rateLimitHit, setRateLimitHit) {\n  const airtableEvents = await fetchAirtableEvents();\n  for (const event of airtableEvents) {\n    if (rateLimitHit) break; // Stop further processing if rate limit hit\n\n    // Ensure branch matches or skip event\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      continue;\n    }\n    if (event.googleEventId) {\n      // If GoogleEventId exists, update the event\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      if (existingGoogleEventId) {\n        await updateGoogleCalendarEvent(event, calendarId, existingGoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n        await updateAirtableWithProcessed(event.id); // Mark as processed in Airtable\n      }\n    } else {\n      // Check if a similar event already exists in Google Calendar\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      if (existingGoogleEventId) {\n        // Update the existing event if found\n        await updateGoogleCalendarEvent(event, calendarId, existingGoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n      } else {\n        // Create a new event if no duplicates found\n        const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit);\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventId(event.id, googleEventId); // Store the Google Event ID in Airtable\n          await updateAirtableWithProcessed(event.id); // Mark as processed\n        }\n      }\n    }\n  }\n}\n\nasync function removeDuplicateGoogleEvents(calendarId, session) {\n  console.log(`Fetching events to check for duplicates in calendar: ${calendarId}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    const events = data.items;\n    const uniqueEvents = {}; // Store unique events\n\n    for (const event of events) {\n      const key = `${event.summary}-${event.start.dateTime}-${event.location}`;\n      if (!uniqueEvents[key]) {\n        uniqueEvents[key] = event; // Store unique event\n      } else {\n        // If duplicate found, delete the event\n        await deleteGoogleCalendarEvent(calendarId, event.id, session);\n        console.log(`Deleted duplicate event: ${event.summary}`);\n      }\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n  }\n}\nasync function deleteGoogleCalendarEvent(calendarId, eventId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n  try {\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    if (response.ok) {\n      console.log(`Event with ID ${eventId} successfully deleted.`);\n    } else {\n      console.error('Failed to delete event:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error deleting event from Google Calendar:', error);\n  }\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo,\n    triggerSync,\n    setTriggerSync\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTriggerSync(false); // Reset the triggerSync after sync\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error));\n      }\n    };\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarSection, \"angMAHcm2jE5suJWSu8EeeNlGl0=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    remaining: null,\n    limit: null,\n    reset: null\n  });\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false); // Move this here\n\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Savannah'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          margin: '0 auto'\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSyncNow,\n            children: \"Sync Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              setRateLimitInfo: setRateLimitInfo,\n              triggerSync: triggerSync,\n              setTriggerSync: setTriggerSync,\n              rateLimitHit: rateLimitHit // Pass rateLimitHit as prop\n              ,\n              setRateLimitHit: setRateLimitHit // Pass setter as prop\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 604,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 608,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 612,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 620,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 618,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 624,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rate-limit-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Google Calendar API Rate Limit Information:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 17\n            }, this), rateLimitInfo.limit !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Limit: \", rateLimitInfo.limit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Remaining: \", rateLimitInfo.remaining]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Reset Time: \", new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No rate limit information available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar'\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 572,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"amX6tbbAFezeNPOqJ+JDA3uw6QI=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App; // Ensure default export\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","debounce","fn","delay","timeoutId","args","clearTimeout","setTimeout","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","setRateLimitHit","console","log","provider_token","error","url","newEvent","summary","title","description","homeownerName","materialsNeeded","issuePictures","completedPictures","start","dateTime","toISOString","end","location","streetAddress","city","state","zipCode","response","fetch","method","headers","Authorization","body","JSON","stringify","status","data","json","remaining","get","limit","reset","ok","id","code","updateGoogleCalendarEvent","eventId","updatedEvent","updateAirtableWithGoogleEventId","airtableRecordId","googleEventId","updateData","fields","GoogleEventId","updateAirtableWithProcessed","Processed","fetchAirtableEvents","retryCount","maxRetries","retryAfter","waitTime","parseInt","Math","pow","warn","Promise","resolve","Error","filteredRecords","records","filter","record","hasEventName","hasStartDate","hasEndDate","map","Date","branch","pic","join","processed","length","checkForDuplicateEvent","items","existingEvent","find","sleep","ms","checkIfAirtableRecordExists","eventTitle","eventStart","eventEnd","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","rateLimitHit","airtableEvents","toLowerCase","existingGoogleEventId","removeDuplicateGoogleEvents","events","uniqueEvents","key","deleteGoogleCalendarEvent","statusText","CalendarSection","triggerSync","setTriggerSync","lastSyncTime","setLastSyncTime","syncEvents","now","then","catch","App","supabase","isLoading","addedRecords","failedRecords","rateLimitInfo","calendarInfo","name","sort","a","b","localeCompare","handleSyncNow","getGreeting","currentHour","getHours","width","margin","user","email","calendar","auth","index","toLocaleTimeString","signInWithOAuth","provider","options","scopes"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newEvent),\n    });\n\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedEvent),\n    });\n\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error.code === 401) {\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId}`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId, // Update Airtable record with GoogleEventId\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\n\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true,  // Mark as processed\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\n\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching unprocessed events from Airtable...');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=NOT({Processed})`;\n  const maxRetries = 1;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n\n        if (retryCount < maxRetries) {\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n\n    const filteredRecords = data.records\n      .filter((record) => {\n        const hasEventName = !!record.fields['Calendar Event Name'];\n        const hasStartDate = !!record.fields['StartDate'];\n        const hasEndDate = !!record.fields['EndDate'];\n\n        if (!hasEventName || !hasStartDate || !hasEndDate) {\n          console.warn(`Record filtered out: ${record.id}`);\n          return false;\n        }\n\n        return true;\n      })\n      .map((record) => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || 'Untitled Event',\n        start: new Date(record.fields['StartDate']),\n        end: new Date(record.fields['EndDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        issuePictures: record.fields['Picture(s) of Issue'] ? record.fields['Picture(s) of Issue'].map(pic => pic.url).join(', ') : 'No pictures provided',\n        completedPictures: record.fields['Completed Pictures'] ? record.fields['Completed Pictures'].map(pic => pic.url).join(', ') : 'No pictures provided',\n        googleEventId: record.fields['GoogleEventId'] || null,\n        processed: record.fields['Processed'] || false,  // Track the Processed field\n      }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n    if (data.items) {\n      const existingEvent = data.items.find(\n        (existingEvent) =>\n          existingEvent.summary === event.title &&\n          existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n      );\n\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function checkIfAirtableRecordExists(eventTitle, eventStart, eventEnd) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND({Calendar Event Name}=\"${eventTitle}\", {StartDate}=\"${eventStart.toISOString()}\", {EndDate}=\"${eventEnd.toISOString()}\")`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await response.json();\n    return data.records.length > 0 ? data.records[0] : null;\n  } catch (error) {\n    console.error('Error checking Airtable for existing record:', error);\n    return null;\n  }\n}\nasync function populateGoogleCalendarWithAirtableRecords(\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  rateLimitHit,\n  setRateLimitHit\n) {\n  const airtableEvents = await fetchAirtableEvents();\n\n  for (const event of airtableEvents) {\n    if (rateLimitHit) break; // Stop further processing if rate limit hit\n\n    // Ensure branch matches or skip event\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      continue;\n    }\n\n    if (event.googleEventId) {\n      // If GoogleEventId exists, update the event\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      if (existingGoogleEventId) {\n        await updateGoogleCalendarEvent(\n          event,\n          calendarId,\n          existingGoogleEventId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n        await updateAirtableWithProcessed(event.id); // Mark as processed in Airtable\n      }\n    } else {\n      // Check if a similar event already exists in Google Calendar\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      \n      if (existingGoogleEventId) {\n        // Update the existing event if found\n        await updateGoogleCalendarEvent(\n          event,\n          calendarId,\n          existingGoogleEventId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n      } else {\n        // Create a new event if no duplicates found\n        const googleEventId = await createGoogleCalendarEvent(\n          event,\n          calendarId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n        \n        if (googleEventId) {\n          await updateAirtableWithGoogleEventId(event.id, googleEventId); // Store the Google Event ID in Airtable\n          await updateAirtableWithProcessed(event.id); // Mark as processed\n        }\n      }\n    }\n  }\n}\n\n\n\nasync function removeDuplicateGoogleEvents(calendarId, session) {\n  console.log(`Fetching events to check for duplicates in calendar: ${calendarId}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n    const events = data.items;\n\n    const uniqueEvents = {}; // Store unique events\n\n    for (const event of events) {\n      const key = `${event.summary}-${event.start.dateTime}-${event.location}`;\n      if (!uniqueEvents[key]) {\n        uniqueEvents[key] = event; // Store unique event\n      } else {\n        // If duplicate found, delete the event\n        await deleteGoogleCalendarEvent(calendarId, event.id, session);\n        console.log(`Deleted duplicate event: ${event.summary}`);\n      }\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n  }\n}\n\nasync function deleteGoogleCalendarEvent(calendarId, eventId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n\n  try {\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    if (response.ok) {\n      console.log(`Event with ID ${eventId} successfully deleted.`);\n    } else {\n      console.error('Failed to delete event:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error deleting event from Google Calendar:', error);\n  }\n}\n\n\n\n\n\n\nfunction CalendarSection({\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  triggerSync,\n  setTriggerSync\n}) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId,\n          calendarName,\n          session,\n          signOut,\n          setAddedRecords,\n          setFailedRecords,\n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n            setLastSyncTime(new Date()); // Update last sync time\n            setTriggerSync(false); // Reset the triggerSync after sync\n          })\n          .catch((error) =>\n            console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error)\n          );\n      }\n    };\n\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n    </div>\n  );\n}\n\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({ remaining: null, limit: null, reset: null });\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false); // Move this here\n\n  const calendarInfo = [\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Savannah' }\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: '100%', margin: '0 auto' }}>\n          {session ? (\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <button onClick={handleSyncNow}>Sync Now</button> {/* Manual Sync Button */}\n              <div className=\"calendar-grid\">\n                {calendarInfo.map((calendar) => (\n                  <CalendarSection\n                  key={calendar.id}\n                  calendarId={calendar.id}\n                  calendarName={calendar.name}\n                  session={session}\n                  signOut={() => supabase.auth.signOut()}\n                  setAddedRecords={setAddedRecords}\n                  setFailedRecords={setFailedRecords}\n                  setRateLimitInfo={setRateLimitInfo}\n                  triggerSync={triggerSync}\n                  setTriggerSync={setTriggerSync}\n                  rateLimitHit={rateLimitHit} // Pass rateLimitHit as prop\n                  setRateLimitHit={setRateLimitHit} // Pass setter as prop\n                />\n                \n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"rate-limit-info\">\n                <h4>Google Calendar API Rate Limit Information:</h4>\n                {rateLimitInfo.limit !== null ? (\n                  <ul>\n                    <li>Limit: {rateLimitInfo.limit}</li>\n                    <li>Remaining: {rateLimitInfo.remaining}</li>\n                    <li>Reset Time: {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()}</li>\n                  </ul>\n                ) : (\n                  <p>No rate limit information available.</p>\n                )}\n              </div>\n              <p></p>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n          ) : (\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({ provider: 'google', options: { scopes: 'https://www.googleapis.com/auth/calendar' } })}>\n                Sign In With Google\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; // Ensure default export\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}