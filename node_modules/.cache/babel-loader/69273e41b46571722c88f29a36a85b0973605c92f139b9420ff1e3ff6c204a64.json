{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    });\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedEvent)\n    });\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error.code === 401) {\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateAirtableWithGoogleEventIdAndProcessed(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId} and marking as processed`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId,\n      // Update Airtable record with GoogleEventId\n      Processed: true // Mark as processed\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID and marking as processed:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID and marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function lockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: true // Mark record as being processed\n    }\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    console.log(`Locked record ${airtableRecordId} for processing`);\n  } catch (error) {\n    console.error(`Failed to lock record ${airtableRecordId}`, error);\n  }\n}\nasync function unlockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: false // Mark record as not being processed\n    }\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    console.log(`Unlocked record ${airtableRecordId} after processing`);\n  } catch (error) {\n    console.error(`Failed to unlock record ${airtableRecordId}`, error);\n  }\n}\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true // Mark as processed\n    }\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching unprocessed events from Airtable...');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND(NOT({Processed}), {GoogleEventId} = BLANK())`; // Fetch only unprocessed records without a GoogleEventId\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return [];\n    }\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n    const filteredRecords = data.records.filter(record => {\n      // Ensure event has a name, start and end dates\n      return record.fields['Calendar Event Name'] && record.fields['StartDate'] && record.fields['EndDate'];\n    }).map(record => ({\n      id: record.id,\n      title: record.fields['Calendar Event Name'] || 'Untitled Event',\n      start: new Date(record.fields['StartDate']),\n      end: new Date(record.fields['EndDate']),\n      description: record.fields['Billable Reason (If Billable)'] || '',\n      branch: record.fields['b'] || 'Unknown',\n      homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n      materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n      streetAddress: record.fields['Street Address'] || 'Unknown',\n      city: record.fields['City'] || 'Unknown',\n      state: record.fields['State'] || 'Unknown',\n      zipCode: record.fields['Zip Code'] || 'Unknown',\n      googleEventId: record.fields['GoogleEventId'] || null,\n      processed: record.fields['Processed'] || false // Track the Processed field\n    }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    return [];\n  }\n}\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n      const existingEvent = data.items.find(existingEvent => existingEvent.summary === event.title &&\n      // Match title\n      existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}` // Match location\n      );\n\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n  return null;\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo, rateLimitHit, setRateLimitHit) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    if (rateLimitHit) {\n      console.log(`Rate limit hit. Stopping further processing.`);\n      break;\n    }\n    console.log(`Processing event \"${event.title}\"...`);\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch mismatch.`);\n      continue;\n    }\n\n    // Lock the record to prevent it from being processed by another process\n    await lockAirtableRecord(event.id);\n\n    // Check if the event already has a GoogleEventId\n    if (event.googleEventId) {\n      console.log(`Event \"${event.title}\" already has a GoogleEventId: ${event.googleEventId}. Verifying in Google Calendar...`);\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      if (existingGoogleEventId) {\n        const updatedGoogleEventId = await updateGoogleCalendarEvent(event, calendarId, existingGoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n        if (updatedGoogleEventId) {\n          added.push(event.title);\n          await updateAirtableWithProcessed(event.id); // Mark as processed\n        } else {\n          failed.push(event.title);\n        }\n      } else {\n        console.log(`No duplicate found for event \"${event.title}\". Skipping update.`);\n      }\n    } else {\n      // Check Google Calendar for an existing event to avoid duplicates\n      const duplicateGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      if (!duplicateGoogleEventId) {\n        const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit);\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventIdAndProcessed(event.id, googleEventId);\n          added.push(event.title);\n        } else {\n          failed.push(event.title);\n        }\n      } else {\n        console.log(`Duplicate event found in Google Calendar for \"${event.title}\". Updating instead...`);\n        const updatedGoogleEventId = await updateGoogleCalendarEvent(event, calendarId, duplicateGoogleEventId, session, signOut, setRateLimitInfo, setRateLimitHit);\n        if (updatedGoogleEventId) {\n          added.push(event.title);\n          await updateAirtableWithProcessed(event.id); // Mark as processed\n        } else {\n          failed.push(event.title);\n        }\n      }\n    }\n    await unlockAirtableRecord(event.id); // Unlock the record after processing\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo,\n    triggerSync,\n    setTriggerSync\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTriggerSync(false); // Reset the triggerSync after sync\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error));\n      }\n    };\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 527,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarSection, \"angMAHcm2jE5suJWSu8EeeNlGl0=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    remaining: null,\n    limit: null,\n    reset: null\n  });\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false); // Move this here\n\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Savannah'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          margin: '0 auto'\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSyncNow,\n            children: \"Sync Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              setRateLimitInfo: setRateLimitInfo,\n              triggerSync: triggerSync,\n              setTriggerSync: setTriggerSync,\n              rateLimitHit: rateLimitHit // Pass rateLimitHit as prop\n              ,\n              setRateLimitHit: setRateLimitHit // Pass setter as prop\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 605,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 609,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 615,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 621,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rate-limit-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Google Calendar API Rate Limit Information:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 17\n            }, this), rateLimitInfo.limit !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Limit: \", rateLimitInfo.limit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Remaining: \", rateLimitInfo.remaining]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 631,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Reset Time: \", new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No rate limit information available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar'\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 569,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"amX6tbbAFezeNPOqJ+JDA3uw6QI=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App; // Ensure default export\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","debounce","fn","delay","timeoutId","args","clearTimeout","setTimeout","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","setRateLimitHit","console","log","provider_token","error","url","newEvent","summary","title","description","homeownerName","materialsNeeded","issuePictures","completedPictures","start","dateTime","toISOString","end","location","streetAddress","city","state","zipCode","response","fetch","method","headers","Authorization","body","JSON","stringify","status","data","json","remaining","get","limit","reset","ok","id","code","updateGoogleCalendarEvent","eventId","updatedEvent","updateAirtableWithGoogleEventIdAndProcessed","airtableRecordId","googleEventId","updateData","fields","GoogleEventId","Processed","lockAirtableRecord","Processing","unlockAirtableRecord","updateAirtableWithProcessed","fetchAirtableEvents","retryCount","filteredRecords","records","filter","record","map","Date","branch","processed","length","checkForDuplicateEvent","items","existingEvent","find","sleep","ms","Promise","resolve","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","rateLimitHit","airtableEvents","added","failed","toLowerCase","existingGoogleEventId","updatedGoogleEventId","push","duplicateGoogleEventId","prev","CalendarSection","triggerSync","setTriggerSync","lastSyncTime","setLastSyncTime","syncEvents","now","then","catch","App","supabase","isLoading","addedRecords","failedRecords","rateLimitInfo","calendarInfo","name","sort","a","b","localeCompare","handleSyncNow","getGreeting","currentHour","getHours","width","margin","user","email","calendar","auth","index","toLocaleTimeString","signInWithOAuth","provider","options","scopes"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newEvent),\n    });\n\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut, setRateLimitInfo, setRateLimitHit) {\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedEvent),\n    });\n\n    if (response.status === 429) {\n      console.error('Rate limit reached. Stopping further requests.');\n      setRateLimitHit(true); // Stop further requests\n      return null;\n    }\n\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error.code === 401) {\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\nasync function updateAirtableWithGoogleEventIdAndProcessed(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId} and marking as processed`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId, // Update Airtable record with GoogleEventId\n      Processed: true,              // Mark as processed\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID and marking as processed:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID and marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\nasync function lockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: true, // Mark record as being processed\n    },\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n    console.log(`Locked record ${airtableRecordId} for processing`);\n  } catch (error) {\n    console.error(`Failed to lock record ${airtableRecordId}`, error);\n  }\n}\n\nasync function unlockAirtableRecord(airtableRecordId) {\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processing: false, // Mark record as not being processed\n    },\n  };\n\n  try {\n    await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n    console.log(`Unlocked record ${airtableRecordId} after processing`);\n  } catch (error) {\n    console.error(`Failed to unlock record ${airtableRecordId}`, error);\n  }\n}\n\n\n\nasync function updateAirtableWithProcessed(airtableRecordId) {\n  console.log(`Marking Airtable record ${airtableRecordId} as processed`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      Processed: true,  // Mark as processed\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with processed status:', data.error);\n    } else {\n      console.log('Airtable record successfully marked as processed:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\n\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching unprocessed events from Airtable...');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND(NOT({Processed}), {GoogleEventId} = BLANK())`; // Fetch only unprocessed records without a GoogleEventId\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Error fetching events from Airtable: HTTP ${response.status}`);\n      return [];\n    }\n\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n\n    const filteredRecords = data.records\n      .filter((record) => {\n        // Ensure event has a name, start and end dates\n        return record.fields['Calendar Event Name'] && record.fields['StartDate'] && record.fields['EndDate'];\n      })\n      .map((record) => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || 'Untitled Event',\n        start: new Date(record.fields['StartDate']),\n        end: new Date(record.fields['EndDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null,\n        processed: record.fields['Processed'] || false,  // Track the Processed field\n      }));\n\n    console.log(`Airtable events to process: ${filteredRecords.length}`, filteredRecords);\n    return filteredRecords;\n\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    return [];\n  }\n}\n\n\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n    \n    if (data.items && data.items.length > 0) {\n      const existingEvent = data.items.find(\n        (existingEvent) =>\n          existingEvent.summary === event.title && // Match title\n          existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}` // Match location\n      );\n\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n\n  return null;\n}\n\n\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\n\nasync function populateGoogleCalendarWithAirtableRecords(\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  rateLimitHit,\n  setRateLimitHit\n) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    if (rateLimitHit) {\n      console.log(`Rate limit hit. Stopping further processing.`);\n      break;\n    }\n\n    console.log(`Processing event \"${event.title}\"...`);\n\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch mismatch.`);\n      continue;\n    }\n\n    // Lock the record to prevent it from being processed by another process\n    await lockAirtableRecord(event.id);\n\n    // Check if the event already has a GoogleEventId\n    if (event.googleEventId) {\n      console.log(`Event \"${event.title}\" already has a GoogleEventId: ${event.googleEventId}. Verifying in Google Calendar...`);\n\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n\n      if (existingGoogleEventId) {\n        const updatedGoogleEventId = await updateGoogleCalendarEvent(\n          event,\n          calendarId,\n          existingGoogleEventId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n\n        if (updatedGoogleEventId) {\n          added.push(event.title);\n          await updateAirtableWithProcessed(event.id); // Mark as processed\n        } else {\n          failed.push(event.title);\n        }\n      } else {\n        console.log(`No duplicate found for event \"${event.title}\". Skipping update.`);\n      }\n    } else {\n      // Check Google Calendar for an existing event to avoid duplicates\n      const duplicateGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n\n      if (!duplicateGoogleEventId) {\n        const googleEventId = await createGoogleCalendarEvent(\n          event,\n          calendarId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventIdAndProcessed(event.id, googleEventId);\n          added.push(event.title);\n        } else {\n          failed.push(event.title);\n        }\n      } else {\n        console.log(`Duplicate event found in Google Calendar for \"${event.title}\". Updating instead...`);\n        const updatedGoogleEventId = await updateGoogleCalendarEvent(\n          event,\n          calendarId,\n          duplicateGoogleEventId,\n          session,\n          signOut,\n          setRateLimitInfo,\n          setRateLimitHit\n        );\n\n        if (updatedGoogleEventId) {\n          added.push(event.title);\n          await updateAirtableWithProcessed(event.id); // Mark as processed\n        } else {\n          failed.push(event.title);\n        }\n      }\n    }\n\n    await unlockAirtableRecord(event.id); // Unlock the record after processing\n    await sleep(1000); // Adding delay between requests\n  }\n\n  setAddedRecords((prev) => [...prev, ...added]);\n  setFailedRecords((prev) => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\n\n\n\n\n\n\n\n\nfunction CalendarSection({\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  triggerSync,\n  setTriggerSync\n}) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId,\n          calendarName,\n          session,\n          signOut,\n          setAddedRecords,\n          setFailedRecords,\n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n            setLastSyncTime(new Date()); // Update last sync time\n            setTriggerSync(false); // Reset the triggerSync after sync\n          })\n          .catch((error) =>\n            console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error)\n          );\n      }\n    };\n\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n    </div>\n  );\n}\n\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({ remaining: null, limit: null, reset: null });\n  const [triggerSync, setTriggerSync] = useState(false);\n  const [rateLimitHit, setRateLimitHit] = useState(false); // Move this here\n\n  const calendarInfo = [\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Savannah' }\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: '100%', margin: '0 auto' }}>\n          {session ? (\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <button onClick={handleSyncNow}>Sync Now</button> {/* Manual Sync Button */}\n              <div className=\"calendar-grid\">\n                {calendarInfo.map((calendar) => (\n                  <CalendarSection\n                  key={calendar.id}\n                  calendarId={calendar.id}\n                  calendarName={calendar.name}\n                  session={session}\n                  signOut={() => supabase.auth.signOut()}\n                  setAddedRecords={setAddedRecords}\n                  setFailedRecords={setFailedRecords}\n                  setRateLimitInfo={setRateLimitInfo}\n                  triggerSync={triggerSync}\n                  setTriggerSync={setTriggerSync}\n                  rateLimitHit={rateLimitHit} // Pass rateLimitHit as prop\n                  setRateLimitHit={setRateLimitHit} // Pass setter as prop\n                />\n                \n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"rate-limit-info\">\n                <h4>Google Calendar API Rate Limit Information:</h4>\n                {rateLimitInfo.limit !== null ? (\n                  <ul>\n                    <li>Limit: {rateLimitInfo.limit}</li>\n                    <li>Remaining: {rateLimitInfo.remaining}</li>\n                    <li>Reset Time: {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()}</li>\n                  </ul>\n                ) : (\n                  <p>No rate limit information available.</p>\n                )}\n              </div>\n              <p></p>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n          ) : (\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({ provider: 'google', options: { scopes: 'https://www.googleapis.com/auth/calendar' } })}>\n                Sign In With Google\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; // Ensure default export\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}