{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    });\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut, setRateLimitInfo) {\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedEvent)\n    });\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error.code === 401) {\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId}`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId\n    }\n  };\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\nasync function fetchAirtableEvents() {\n  let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  let retryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let allEvents = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  console.log('Fetching events from Airtable...');\n  let url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?limit=${limit}`;\n  if (offset) {\n    url += `&offset=${offset}`;\n  }\n  const maxRetries = 1;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(limit, retryCount + 1, offset, allEvents); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n    const filteredRecords = data.records.filter(record => {\n      const hasEventName = !!record.fields['Calendar Event Name'];\n      const hasStartDate = !!record.fields['StartDate'];\n      const hasEndDate = !!record.fields['EndDate'];\n      if (!hasEventName || !hasStartDate || !hasEndDate) {\n        console.warn(`Record filtered out: ${record.id}`);\n        return false;\n      }\n      return true;\n    }).map(record => ({\n      id: record.id,\n      title: record.fields['Calendar Event Name'] || 'Untitled Event',\n      start: new Date(record.fields['StartDate']),\n      end: new Date(record.fields['EndDate']),\n      description: record.fields['Billable Reason (If Billable)'] || '',\n      branch: record.fields['b'] || 'Unknown',\n      homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n      materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n      streetAddress: record.fields['Street Address'] || 'Unknown',\n      city: record.fields['City'] || 'Unknown',\n      state: record.fields['State'] || 'Unknown',\n      zipCode: record.fields['Zip Code'] || 'Unknown',\n      issuePictures: record.fields['Picture(s) of Issue'] ? record.fields['Picture(s) of Issue'].map(pic => pic.url).join(', ') : 'No pictures provided',\n      completedPictures: record.fields['Completed Pictures'] ? record.fields['Completed Pictures'].map(pic => pic.url).join(', ') : 'No pictures provided',\n      googleEventId: record.fields['GoogleEventId'] || null\n    }));\n    allEvents = allEvents.concat(filteredRecords); // Accumulate all records\n\n    // Check if there is more data to fetch with offset\n    if (data.offset) {\n      console.log('Fetching next page of Airtable data...');\n      return fetchAirtableEvents(limit, 0, data.offset, allEvents); // Recursive call for next page\n    } else {\n      // No more data, return all accumulated events\n      console.log('All Airtable events have been fetched.');\n      return allEvents;\n    }\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(limit, retryCount + 1, offset, allEvents);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    if (data.items) {\n      const existingEvent = data.items.find(existingEvent => existingEvent.summary.trim() === event.title.trim() && existingEvent.location.trim() === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`.trim());\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function checkIfAirtableRecordExists(eventTitle, eventStart, eventEnd) {\n  const formattedStartDate = eventStart.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  const formattedEndDate = eventEnd.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND({Calendar Event Name}=\"${eventTitle}\", IS_SAME({StartDate}, \"${formattedStartDate}\", 'day'), IS_SAME({EndDate}, \"${formattedEndDate}\", 'day'))`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    return data.records.length > 0 ? data.records[0] : null;\n  } catch (error) {\n    console.error('Error checking Airtable for existing record:', error);\n    return null;\n  }\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    console.log(`Processing event \"${event.title}\"...`);\n\n    // Skip events if the branch doesn't match\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`);\n      continue;\n    }\n    try {\n      // **Check for duplicates before making any API calls**\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      if (existingGoogleEventId) {\n        console.log(`Found existing event: \"${event.title}\". Updating...`);\n\n        // Update the event if a duplicate is found\n        const updatedGoogleEventId = await updateGoogleCalendarEvent(event, calendarId, existingGoogleEventId, session, signOut, setRateLimitInfo);\n        if (updatedGoogleEventId) {\n          await updateAirtableWithGoogleEventId(event.id, updatedGoogleEventId);\n          added.push({\n            title: event.title,\n            status: 'Updated in Google Calendar'\n          });\n        } else {\n          failed.push({\n            title: event.title,\n            reason: 'Error during update'\n          });\n        }\n      } else {\n        console.log(`No existing event found for \"${event.title}\". Creating new...`);\n\n        // Retry logic for creating events\n        let retries = 0;\n        let googleEventId = null;\n        const maxRetries = 3;\n        while (retries < maxRetries && !googleEventId) {\n          googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n          if (!googleEventId) {\n            console.warn(`Retry attempt ${retries + 1} failed for event \"${event.title}\". Retrying...`);\n            retries++;\n            await sleep(1000); // Sleep for a second before retrying\n          }\n        }\n\n        // If event creation was successful\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventId(event.id, googleEventId);\n          added.push({\n            title: event.title,\n            status: 'Created in Google Calendar'\n          });\n        } else {\n          failed.push({\n            title: event.title,\n            reason: 'Error during creation'\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing event \"${event.title}\":`, error);\n      failed.push({\n        title: event.title,\n        reason: 'Error processing event'\n      });\n    }\n\n    // Sleep between requests to prevent hitting rate limits\n    await sleep(1000);\n  }\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo,\n    triggerSync,\n    setTriggerSync\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTriggerSync(false); // Reset the triggerSync after sync\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error));\n      }\n    };\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarSection, \"angMAHcm2jE5suJWSu8EeeNlGl0=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    remaining: null,\n    limit: null,\n    reset: null\n  });\n  const [triggerSync, setTriggerSync] = useState(false);\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Savannah'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          margin: '0 auto'\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSyncNow,\n            children: \"Sync Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              setRateLimitInfo: setRateLimitInfo,\n              triggerSync: triggerSync,\n              setTriggerSync: setTriggerSync\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 541,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: [record.title, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 546,\n                      columnNumber: 29\n                    }, this), \" \", record.status]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 545,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 555,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: [record.title, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 560,\n                      columnNumber: 29\n                    }, this), \" \", record.reason]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 559,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 565,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rate-limit-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Google Calendar API Rate Limit Information:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 17\n            }, this), rateLimitInfo.limit !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Limit: \", rateLimitInfo.limit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Remaining: \", rateLimitInfo.remaining]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Reset Time: \", new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No rate limit information available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar'\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 512,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"Smo9ehPqtUTDVtuaDO+GPE/J6hg=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","debounce","fn","delay","timeoutId","args","clearTimeout","setTimeout","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","console","log","provider_token","error","url","newEvent","summary","title","description","homeownerName","materialsNeeded","issuePictures","completedPictures","start","dateTime","toISOString","end","location","streetAddress","city","state","zipCode","response","fetch","method","headers","Authorization","body","JSON","stringify","data","json","remaining","get","limit","reset","ok","id","code","updateGoogleCalendarEvent","eventId","updatedEvent","updateAirtableWithGoogleEventId","airtableRecordId","googleEventId","updateData","fields","GoogleEventId","fetchAirtableEvents","retryCount","offset","allEvents","maxRetries","status","retryAfter","waitTime","parseInt","Math","pow","warn","Promise","resolve","Error","filteredRecords","records","filter","record","hasEventName","hasStartDate","hasEndDate","map","Date","branch","pic","join","concat","checkForDuplicateEvent","items","existingEvent","find","trim","sleep","ms","checkIfAirtableRecordExists","eventTitle","eventStart","eventEnd","formattedStartDate","split","formattedEndDate","length","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","airtableEvents","added","failed","toLowerCase","existingGoogleEventId","updatedGoogleEventId","push","reason","retries","prev","CalendarSection","triggerSync","setTriggerSync","lastSyncTime","setLastSyncTime","syncEvents","now","then","catch","App","supabase","isLoading","addedRecords","failedRecords","rateLimitInfo","calendarInfo","name","sort","a","b","localeCompare","handleSyncNow","getGreeting","currentHour","getHours","width","margin","user","email","calendar","auth","index","toLocaleTimeString","signInWithOAuth","provider","options","scopes"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log(`Attempting to create a new Google Calendar event for calendar: ${calendarId}`, event);\n\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  console.log('Event data being sent to Google Calendar API:', newEvent);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newEvent),\n    });\n\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully created in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to create event:', data);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\nasync function updateGoogleCalendarEvent(event, calendarId, eventId, session, signOut, setRateLimitInfo) {\n  console.log(`Updating Google Calendar event for ID: ${eventId}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;\n\n  const updatedEvent = {\n    summary: event.title,\n    description: `\n      ${event.description}\n      \\nHomeowner Name: ${event.homeownerName}\n      \\nMaterials Needed: ${event.materialsNeeded || 'Not specified'}\n      \\nIssue Pictures: ${event.issuePictures}\n      \\nCompleted Pictures: ${event.completedPictures}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedEvent),\n    });\n\n    const data = await response.json();\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    if (response.ok) {\n      console.log('Event successfully updated in Google Calendar with ID:', data.id);\n      return data.id;\n    } else {\n      console.error('Failed to update event:', data);\n      if (data.error.code === 401) {\n        signOut();\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error during Google Calendar API request:', error);\n    return null;\n  }\n}\n\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with Google Event ID: ${googleEventId}`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId,\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    const data = await response.json();\n    console.log('Airtable update response:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated with Google Event ID:', data);\n    }\n  } catch (error) {\n    console.error('Error during Airtable API request:', error);\n  }\n}\n\nasync function fetchAirtableEvents(limit = 50, retryCount = 0, offset = null, allEvents = []) {\n  console.log('Fetching events from Airtable...');\n  \n  let url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?limit=${limit}`;\n  if (offset) {\n    url += `&offset=${offset}`;\n  }\n  \n  const maxRetries = 1;\n  \n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n  \n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n  \n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n  \n        if (retryCount < maxRetries) {\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(limit, retryCount + 1, offset, allEvents); // Retry with incremented retry count\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n  \n    const data = await response.json();\n    console.log('Raw Airtable data fetched:', data);\n    \n    const filteredRecords = data.records\n      .filter((record) => {\n        const hasEventName = !!record.fields['Calendar Event Name'];\n        const hasStartDate = !!record.fields['StartDate'];\n        const hasEndDate = !!record.fields['EndDate'];\n  \n        if (!hasEventName || !hasStartDate || !hasEndDate) {\n          console.warn(`Record filtered out: ${record.id}`);\n          return false;\n        }\n  \n        return true;\n      })\n      .map((record) => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || 'Untitled Event',\n        start: new Date(record.fields['StartDate']),\n        end: new Date(record.fields['EndDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        materialsNeeded: record.fields['Materials Needed'] || 'Not specified',\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        issuePictures: record.fields['Picture(s) of Issue'] ? record.fields['Picture(s) of Issue'].map(pic => pic.url).join(', ') : 'No pictures provided',\n        completedPictures: record.fields['Completed Pictures'] ? record.fields['Completed Pictures'].map(pic => pic.url).join(', ') : 'No pictures provided',\n        googleEventId: record.fields['GoogleEventId'] || null,\n      }));\n\n    allEvents = allEvents.concat(filteredRecords); // Accumulate all records\n    \n    // Check if there is more data to fetch with offset\n    if (data.offset) {\n      console.log('Fetching next page of Airtable data...');\n      return fetchAirtableEvents(limit, 0, data.offset, allEvents); // Recursive call for next page\n    } else {\n      // No more data, return all accumulated events\n      console.log('All Airtable events have been fetched.');\n      return allEvents;\n    }\n  \n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(limit, retryCount + 1, offset, allEvents);\n    } else {\n      throw error; // Re-throw the error after max retries\n    }\n  }\n}\n\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n    if (data.items) {\n      const existingEvent = data.items.find(\n        (existingEvent) =>\n          existingEvent.summary.trim() === event.title.trim() &&\n          existingEvent.location.trim() === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`.trim()\n      );\n\n      return existingEvent ? existingEvent.id : null; // Return the Google Event ID if a match is found\n    }\n  } catch (error) {\n    console.error('Error checking for duplicate events in Google Calendar:', error);\n    return null;\n  }\n}\n\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function checkIfAirtableRecordExists(eventTitle, eventStart, eventEnd) {\n  const formattedStartDate = eventStart.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  const formattedEndDate = eventEnd.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  \n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ?filterByFormula=AND({Calendar Event Name}=\"${eventTitle}\", IS_SAME({StartDate}, \"${formattedStartDate}\", 'day'), IS_SAME({EndDate}, \"${formattedEndDate}\", 'day'))`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await response.json();\n    return data.records.length > 0 ? data.records[0] : null;\n  } catch (error) {\n    console.error('Error checking Airtable for existing record:', error);\n    return null;\n  }\n}\n\nasync function populateGoogleCalendarWithAirtableRecords(\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo\n) {\n  console.log(`Starting to populate Google Calendar \"${calendarName}\" with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n  console.log(`Processing ${airtableEvents.length} Airtable events for Google Calendar sync...`);\n\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    console.log(`Processing event \"${event.title}\"...`);\n\n    // Skip events if the branch doesn't match\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`);\n      continue;\n    }\n\n    try {\n      // **Check for duplicates before making any API calls**\n      const existingGoogleEventId = await checkForDuplicateEvent(event, calendarId, session);\n      \n      if (existingGoogleEventId) {\n        console.log(`Found existing event: \"${event.title}\". Updating...`);\n\n        // Update the event if a duplicate is found\n        const updatedGoogleEventId = await updateGoogleCalendarEvent(\n          event,\n          calendarId,\n          existingGoogleEventId,\n          session,\n          signOut,\n          setRateLimitInfo\n        );\n\n        if (updatedGoogleEventId) {\n          await updateAirtableWithGoogleEventId(event.id, updatedGoogleEventId);\n          added.push({ title: event.title, status: 'Updated in Google Calendar' });\n        } else {\n          failed.push({ title: event.title, reason: 'Error during update' });\n        }\n\n      } else {\n        console.log(`No existing event found for \"${event.title}\". Creating new...`);\n\n        // Retry logic for creating events\n        let retries = 0;\n        let googleEventId = null;\n        const maxRetries = 3;\n\n        while (retries < maxRetries && !googleEventId) {\n          googleEventId = await createGoogleCalendarEvent(\n            event,\n            calendarId,\n            session,\n            signOut,\n            setRateLimitInfo\n          );\n\n          if (!googleEventId) {\n            console.warn(`Retry attempt ${retries + 1} failed for event \"${event.title}\". Retrying...`);\n            retries++;\n            await sleep(1000); // Sleep for a second before retrying\n          }\n        }\n\n        // If event creation was successful\n        if (googleEventId) {\n          await updateAirtableWithGoogleEventId(event.id, googleEventId);\n          added.push({ title: event.title, status: 'Created in Google Calendar' });\n        } else {\n          failed.push({ title: event.title, reason: 'Error during creation' });\n        }\n      }\n      \n    } catch (error) {\n      console.error(`Error processing event \"${event.title}\":`, error);\n      failed.push({ title: event.title, reason: 'Error processing event' });\n    }\n\n    // Sleep between requests to prevent hitting rate limits\n    await sleep(1000);\n  }\n\n  setAddedRecords((prev) => [...prev, ...added]);\n  setFailedRecords((prev) => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar \"${calendarName}\" with Airtable records.`);\n}\n\n\n\n\n\nfunction CalendarSection({\n  calendarId,\n  calendarName,\n  session,\n  signOut,\n  setAddedRecords,\n  setFailedRecords,\n  setRateLimitInfo,\n  triggerSync,\n  setTriggerSync\n}) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n\n  useEffect(() => {\n    const syncEvents = () => {\n      const now = new Date();\n      console.log('Attempting to sync events...');\n\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n\n      if (session && triggerSync) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n\n        console.log('Session valid. Initiating sync...');\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId,\n          calendarName,\n          session,\n          signOut,\n          setAddedRecords,\n          setFailedRecords,\n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing events to Google Calendar \"${calendarName}\"`);\n            setLastSyncTime(new Date()); // Update last sync time\n            setTriggerSync(false); // Reset the triggerSync after sync\n          })\n          .catch((error) =>\n            console.error(`Error syncing Airtable to Google Calendar \"${calendarName}\":`, error)\n          );\n      }\n    };\n\n    if (triggerSync) {\n      console.log(`Manual sync triggered for calendar: ${calendarName}`);\n      syncEvents();\n    }\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime, triggerSync, setTriggerSync]);\n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n    </div>\n  );\n}\n\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({ remaining: null, limit: null, reset: null });\n  const [triggerSync, setTriggerSync] = useState(false);\n\n  const calendarInfo = [\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Savannah' }\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const handleSyncNow = () => {\n    console.log('Manual sync button clicked.');\n    setTriggerSync(true); // Trigger manual sync\n  };\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return 'Good morning';\n    } else if (currentHour < 18) {\n      return 'Good afternoon';\n    } else {\n      return 'Good evening';\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: '100%', margin: '0 auto' }}>\n          {session ? (\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <button onClick={handleSyncNow}>Sync Now</button> {/* Manual Sync Button */}\n              <div className=\"calendar-grid\">\n                {calendarInfo.map((calendar) => (\n                  <CalendarSection\n                    key={calendar.id}\n                    calendarId={calendar.id}\n                    calendarName={calendar.name}\n                    session={session}\n                    signOut={() => supabase.auth.signOut()}\n                    setAddedRecords={setAddedRecords}\n                    setFailedRecords={setFailedRecords}\n                    setRateLimitInfo={setRateLimitInfo}\n                    triggerSync={triggerSync}\n                    setTriggerSync={setTriggerSync}\n                  />\n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>\n                            <strong>{record.title}:</strong> {record.status}\n                          </li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>\n                            <strong>{record.title}:</strong> {record.reason}\n                          </li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"rate-limit-info\">\n                <h4>Google Calendar API Rate Limit Information:</h4>\n                {rateLimitInfo.limit !== null ? (\n                  <ul>\n                    <li>Limit: {rateLimitInfo.limit}</li>\n                    <li>Remaining: {rateLimitInfo.remaining}</li>\n                    <li>Reset Time: {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()}</li>\n                  </ul>\n                ) : (\n                  <p>No rate limit information available.</p>\n                )}\n              </div>\n              <p></p>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n          ) : (\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({ provider: 'google', options: { scopes: 'https://www.googleapis.com/auth/calendar' } })}>\n                Sign In With Google\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}