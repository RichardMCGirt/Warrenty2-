{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log('Attempting to create a new Google Calendar event:', event);\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const pictureUrlsDescription = event.pictureUrls.length > 0 ? 'Pictures of Issue:\\n' + event.pictureUrls.join('\\n') : 'No pictures provided.';\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description ? event.description + '\\n' : ''}\n      Homeowner Name: ${event.homeownerName}\n      Lot Number: ${event.lotNumber}\n      Community/Neighborhood: ${event.community}\n      Contact Email: ${event.contactEmail}\n      Calendar Link: ${event.calendarLink ? event.calendarLink : 'Not Provided'}\n      ${pictureUrlsDescription}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('New event data:', newEvent);\n  return debounce(async () => {\n    return await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    }).then(response => {\n      const remaining = response.headers.get('X-RateLimit-Remaining');\n      const limit = response.headers.get('X-RateLimit-Limit');\n      const reset = response.headers.get('X-RateLimit-Reset');\n      setRateLimitInfo({\n        remaining,\n        limit,\n        reset\n      });\n      return response.json();\n    }).then(data => {\n      console.log('Google Calendar creation response:', data);\n      if (data.error) {\n        console.error('Error creating event:', data.error);\n        if (data.error.code === 401) {\n          console.error('Unauthorized - Logging out');\n          signOut(); // Logout if unauthorized\n        }\n\n        return null;\n      } else {\n        console.log('New event successfully created:', data);\n        return data.id;\n      }\n    }).catch(error => console.error('Error during fetch request:', error));\n  }, 1000 // 1 second delay between API calls\n  );\n}\n\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log('Updating Airtable with new Google Event ID:', googleEventId);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId\n    }\n  };\n  console.log('Airtable update data:', updateData);\n  return await fetch(url, {\n    method: 'PATCH',\n    headers: {\n      'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updateData)\n  }).then(response => response.json()).then(data => {\n    console.log('Airtable API response for update:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated:', data);\n    }\n  }).catch(error => console.error('Error during fetch request:', error));\n}\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching events from Airtable');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1);\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Fetched data from Airtable:', data);\n    return data.records.filter(record => record.fields['Calendar Event Name'] && record.fields['startDate'] && record.fields['endDate']).map(record => {\n      var _record$fields$Pictur;\n      return {\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || \"Untitled Event\",\n        start: new Date(record.fields['startDate']),\n        end: new Date(record.fields['endDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        lotNumber: record.fields['Lot Number'] || 'Unknown',\n        community: record.fields['Community/Neighborhood'] || 'Unknown',\n        contactEmail: record.fields['Contact Email'] || 'Unknown',\n        calendarLink: record.fields['Calendar Link'] || '',\n        pictureUrls: ((_record$fields$Pictur = record.fields['Picture(s) of Issue']) === null || _record$fields$Pictur === void 0 ? void 0 : _record$fields$Pictur.map(pic => pic.url)) || [],\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error;\n    }\n  }\n}\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  const response = await fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + session.provider_token\n    }\n  });\n  const data = await response.json();\n  if (data.items) {\n    return data.items.some(existingEvent => existingEvent.summary === event.title && existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`);\n  }\n  return false;\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Populating Google Calendar (${calendarName}) with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    // Skip events where the branch is \"Unknown\" or does not match the calendar name\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`);\n      continue;\n    }\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n    const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      failed.push(event.title);\n    }\n\n    // Introduce a delay of 1 second between requests\n    await sleep(600000);\n  }\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar (${calendarName}) with Airtable records.`);\n}\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  useEffect(() => {\n    console.log('Session state:', session);\n    const syncEvents = () => {\n      const now = new Date();\n\n      // Check if a sync has occurred in the last 15 minutes\n      if (lastSyncTime && now - lastSyncTime < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n      if (session) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing Airtable events to Google Calendar (${calendarName})`);\n          setLastSyncTime(new Date()); // Update last sync time\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar (${calendarName}):`, error));\n      }\n    };\n\n    // Run syncEvents immediately when the component mounts\n    syncEvents();\n\n    // Set up an interval to run syncEvents every 15 minutes (900000 ms)\n    const intervalId = setInterval(syncEvents, 10000);\n\n    // Clear the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarSection, \"angMAHcm2jE5suJWSu8EeeNlGl0=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    remaining: null,\n    limit: null,\n    reset: null\n  });\n\n  // Sort calendar info alphabetically by name\n  const calendarInfo = [{\n    id: 'c_d113e252e0e5c8cfbf17a13149707a30d3c0fbeeff1baaac7a46940c2cc448ca@group.calendar.google.com',\n    name: 'Charleston'\n  }, {\n    id: 'c_03867438b82e5dfd8d4d3b6096c8eb1c715425fa012054cc95f8dea7ef41c79b@group.calendar.google.com',\n    name: 'Greensboro'\n  }, {\n    id: 'c_ad562073f4db2c47279af5aa40e53fc2641b12ad2497ccd925feb220a0f1abee@group.calendar.google.com',\n    name: 'Myrtle Beach'\n  }, {\n    id: 'c_45db4e963c3363676038697855d7aacfd1075da441f9308e44714768d4a4f8de@group.calendar.google.com',\n    name: 'Wilmington'\n  }, {\n    id: 'https://calendar.google.com/calendar/embed?src=c_0476130ac741b9c58b404c737a8068a8b1b06ba1de2a84cff08c5d15ced54edf%40group.calendar.google.com&ctz=America%2FToronto',\n    name: 'Grenville'\n  }, {\n    id: 'https://calendar.google.com/calendar/embed?src=c_df033dd6c81bb3cbb5c6fdfd58dd2931e145e061b8a04ea0c13c79963cb6d515%40group.calendar.google.com&ctz=America%2FToronto',\n    name: 'Columbia'\n  }, {\n    id: 'warranty@vanirinstalledsales.com',\n    name: 'Raleigh'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return \"Good morning\";\n    } else if (currentHour < 18) {\n      return \"Good afternoon\";\n    } else {\n      return \"Good evening\";\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          margin: \"0 auto\"\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              setRateLimitInfo: setRateLimitInfo\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 386,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rate-limit-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Google Calendar API Rate Limit Information:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this), rateLimitInfo.limit !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Limit: \", rateLimitInfo.limit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Remaining: \", rateLimitInfo.remaining]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Reset Time: \", new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No rate limit information available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar'\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"LrmoXDPuD0WbLefaZyCOpFogaJg=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","debounce","fn","delay","timeoutId","args","clearTimeout","setTimeout","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","console","log","provider_token","error","url","pictureUrlsDescription","pictureUrls","length","join","newEvent","summary","title","description","homeownerName","lotNumber","community","contactEmail","calendarLink","start","dateTime","toISOString","end","location","streetAddress","city","state","zipCode","fetch","method","headers","body","JSON","stringify","then","response","remaining","get","limit","reset","json","data","code","id","catch","updateAirtableWithGoogleEventId","airtableRecordId","googleEventId","updateData","fields","GoogleEventId","fetchAirtableEvents","retryCount","maxRetries","ok","status","retryAfter","waitTime","parseInt","Math","pow","warn","Promise","resolve","Error","records","filter","record","map","Date","branch","pic","checkForDuplicateEvent","items","some","existingEvent","sleep","ms","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","airtableEvents","added","failed","toLowerCase","isDuplicate","push","prev","CalendarSection","lastSyncTime","setLastSyncTime","syncEvents","now","intervalId","setInterval","clearInterval","App","supabase","isLoading","addedRecords","failedRecords","rateLimitInfo","calendarInfo","name","sort","a","b","localeCompare","getGreeting","currentHour","getHours","width","margin","user","email","calendar","auth","index","toLocaleTimeString","signInWithOAuth","provider","options","scopes"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Helper to debounce API calls\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log('Attempting to create a new Google Calendar event:', event);\n\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const pictureUrlsDescription = event.pictureUrls.length > 0 \n    ? 'Pictures of Issue:\\n' + event.pictureUrls.join('\\n')\n    : 'No pictures provided.';\n\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description ? event.description + '\\n' : ''}\n      Homeowner Name: ${event.homeownerName}\n      Lot Number: ${event.lotNumber}\n      Community/Neighborhood: ${event.community}\n      Contact Email: ${event.contactEmail}\n      Calendar Link: ${event.calendarLink ? event.calendarLink : 'Not Provided'}\n      ${pictureUrlsDescription}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  console.log('New event data:', newEvent);\n\n  return debounce(\n    async () => {\n      return await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + session.provider_token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newEvent)\n      }).then(response => {\n        const remaining = response.headers.get('X-RateLimit-Remaining');\n        const limit = response.headers.get('X-RateLimit-Limit');\n        const reset = response.headers.get('X-RateLimit-Reset');\n        setRateLimitInfo({ remaining, limit, reset });\n\n        return response.json();\n      }).then(data => {\n        console.log('Google Calendar creation response:', data);\n        if (data.error) {\n          console.error('Error creating event:', data.error);\n          if (data.error.code === 401) {\n            console.error('Unauthorized - Logging out');\n            signOut(); // Logout if unauthorized\n          }\n          return null;\n        } else {\n          console.log('New event successfully created:', data);\n          return data.id;\n        }\n      }).catch(error => console.error('Error during fetch request:', error));\n    },\n    1000 // 1 second delay between API calls\n  );\n}\n\n\n\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log('Updating Airtable with new Google Event ID:', googleEventId);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId\n    }\n  };\n\n  console.log('Airtable update data:', updateData);\n\n  return await fetch(url, {\n    method: 'PATCH',\n    headers: {\n      'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updateData)\n  }).then(response => response.json())\n    .then(data => {\n      console.log('Airtable API response for update:', data);\n      if (data.error) {\n        console.error('Error updating Airtable with Google Event ID:', data.error);\n      } else {\n        console.log('Airtable record successfully updated:', data);\n      }\n    }).catch(error => console.error('Error during fetch request:', error));\n}\n\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching events from Airtable');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1);\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n\n    const data = await response.json();\n    console.log('Fetched data from Airtable:', data);\n\n    return data.records\n      .filter(record => record.fields['Calendar Event Name'] && record.fields['startDate'] && record.fields['endDate'])\n      .map(record => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || \"Untitled Event\",\n        start: new Date(record.fields['startDate']),\n        end: new Date(record.fields['endDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        lotNumber: record.fields['Lot Number'] || 'Unknown',\n        community: record.fields['Community/Neighborhood'] || 'Unknown',\n        contactEmail: record.fields['Contact Email'] || 'Unknown',\n        calendarLink: record.fields['Calendar Link'] || '',\n        pictureUrls: record.fields['Picture(s) of Issue']?.map(pic => pic.url) || [],\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null,\n      }));\n\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error;\n    }\n  }\n}\n\n\n\n\n\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  \n  const response = await fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + session.provider_token,\n    },\n  });\n\n  const data = await response.json();\n  \n  if (data.items) {\n    return data.items.some(existingEvent =>\n      existingEvent.summary === event.title &&\n      existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n    );\n  }\n\n  return false;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Populating Google Calendar (${calendarName}) with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    // Skip events where the branch is \"Unknown\" or does not match the calendar name\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`);\n      continue;\n    }\n\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n\n    const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      failed.push(event.title);\n    }\n\n    // Introduce a delay of 1 second between requests\n    await sleep(600000);\n  }\n\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar (${calendarName}) with Airtable records.`);\n}\n\n\nfunction CalendarSection({ calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo }) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n\n  useEffect(() => {\n    console.log('Session state:', session);\n\n    const syncEvents = () => {\n      const now = new Date();\n\n      // Check if a sync has occurred in the last 15 minutes\n      if (lastSyncTime && (now - lastSyncTime) < 900000) {\n        console.log('Sync skipped. Last sync was less than 15 minutes ago.');\n        return;\n      }\n\n      if (session) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId, \n          calendarName, \n          session, \n          signOut, \n          setAddedRecords, \n          setFailedRecords, \n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing Airtable events to Google Calendar (${calendarName})`);\n            setLastSyncTime(new Date());  // Update last sync time\n          })\n          .catch(error => console.error(`Error syncing Airtable to Google Calendar (${calendarName}):`, error));\n      }\n    };\n\n    // Run syncEvents immediately when the component mounts\n    syncEvents();\n\n    // Set up an interval to run syncEvents every 15 minutes (900000 ms)\n    const intervalId = setInterval(syncEvents, 10000);\n\n    // Clear the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime]);\n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n    </div>\n  );\n}\n\n\n\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({ remaining: null, limit: null, reset: null });\n\n  // Sort calendar info alphabetically by name\n  const calendarInfo = [\n    { id: 'c_d113e252e0e5c8cfbf17a13149707a30d3c0fbeeff1baaac7a46940c2cc448ca@group.calendar.google.com', name: 'Charleston' },\n    { id: 'c_03867438b82e5dfd8d4d3b6096c8eb1c715425fa012054cc95f8dea7ef41c79b@group.calendar.google.com', name: 'Greensboro' },\n    { id: 'c_ad562073f4db2c47279af5aa40e53fc2641b12ad2497ccd925feb220a0f1abee@group.calendar.google.com', name: 'Myrtle Beach' },\n    { id: 'c_45db4e963c3363676038697855d7aacfd1075da441f9308e44714768d4a4f8de@group.calendar.google.com', name: 'Wilmington' },\n    { id: 'https://calendar.google.com/calendar/embed?src=c_0476130ac741b9c58b404c737a8068a8b1b06ba1de2a84cff08c5d15ced54edf%40group.calendar.google.com&ctz=America%2FToronto', name: 'Grenville'},\n    { id: 'https://calendar.google.com/calendar/embed?src=c_df033dd6c81bb3cbb5c6fdfd58dd2931e145e061b8a04ea0c13c79963cb6d515%40group.calendar.google.com&ctz=America%2FToronto', name: 'Columbia'},\n    { id: 'warranty@vanirinstalledsales.com', name: 'Raleigh' }\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const getGreeting = () => {\n    const currentHour = new Date().getHours();\n    if (currentHour < 12) {\n      return \"Good morning\";\n    } else if (currentHour < 18) {\n      return \"Good afternoon\";\n    } else {\n      return \"Good evening\";\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: \"100%\", margin: \"0 auto\" }}>\n          {session ?\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <div className=\"calendar-grid\">\n                {calendarInfo.map(calendar => (\n                  <CalendarSection\n                    key={calendar.id}\n                    calendarId={calendar.id}\n                    calendarName={calendar.name}\n                    session={session}\n                    signOut={() => supabase.auth.signOut()}\n                    setAddedRecords={setAddedRecords}\n                    setFailedRecords={setFailedRecords}\n                    setRateLimitInfo={setRateLimitInfo}\n                  />\n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"rate-limit-info\">\n                <h4>Google Calendar API Rate Limit Information:</h4>\n                {rateLimitInfo.limit !== null ? (\n                  <ul>\n                    <li>Limit: {rateLimitInfo.limit}</li>\n                    <li>Remaining: {rateLimitInfo.remaining}</li>\n                    <li>Reset Time: {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()}</li>\n                  </ul>\n                ) : (\n                  <p>No rate limit information available.</p>\n                )}\n              </div>\n              <p></p>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n            :\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({ provider: 'google', options: { scopes: 'https://www.googleapis.com/auth/calendar' } })}>\n                Sign In With Google\n              </button>\n            </>\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,8BAA8B;;AAE/F;AAAA;AAAA;AACA,SAASC,QAAQ,CAACC,EAAE,EAAEC,KAAK,EAAE;EAC3B,IAAIC,SAAS;EACb,OAAO,YAAa;IAAA,kCAATC,IAAI;MAAJA,IAAI;IAAA;IACb,IAAID,SAAS,EAAE;MACbE,YAAY,CAACF,SAAS,CAAC;IACzB;IACAA,SAAS,GAAGG,UAAU,CAAC,MAAM;MAC3BL,EAAE,CAAC,GAAGG,IAAI,CAAC;IACb,CAAC,EAAEF,KAAK,CAAC;EACX,CAAC;AACH;AAEA,eAAeK,yBAAyB,CAACC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEC,gBAAgB,EAAE;EAC9FC,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEN,KAAK,CAAC;EAEvE,IAAI,CAACE,OAAO,CAACK,cAAc,EAAE;IAC3BF,OAAO,CAACG,KAAK,CAAC,gDAAgD,CAAC;IAC/DL,OAAO,EAAE;IACT,OAAO,IAAI;EACb;EAEA,MAAMM,GAAG,GAAI,oDAAmDR,UAAW,SAAQ;EAEnF,MAAMS,sBAAsB,GAAGV,KAAK,CAACW,WAAW,CAACC,MAAM,GAAG,CAAC,GACvD,sBAAsB,GAAGZ,KAAK,CAACW,WAAW,CAACE,IAAI,CAAC,IAAI,CAAC,GACrD,uBAAuB;EAE3B,MAAMC,QAAQ,GAAG;IACfC,OAAO,EAAEf,KAAK,CAACgB,KAAK;IACpBC,WAAW,EAAG;AAClB,QAAQjB,KAAK,CAACiB,WAAW,GAAGjB,KAAK,CAACiB,WAAW,GAAG,IAAI,GAAG,EAAG;AAC1D,wBAAwBjB,KAAK,CAACkB,aAAc;AAC5C,oBAAoBlB,KAAK,CAACmB,SAAU;AACpC,gCAAgCnB,KAAK,CAACoB,SAAU;AAChD,uBAAuBpB,KAAK,CAACqB,YAAa;AAC1C,uBAAuBrB,KAAK,CAACsB,YAAY,GAAGtB,KAAK,CAACsB,YAAY,GAAG,cAAe;AAChF,QAAQZ,sBAAuB;AAC/B,KAAK;IACDa,KAAK,EAAE;MAAEC,QAAQ,EAAExB,KAAK,CAACuB,KAAK,CAACE,WAAW;IAAG,CAAC;IAC9CC,GAAG,EAAE;MAAEF,QAAQ,EAAExB,KAAK,CAAC0B,GAAG,CAACD,WAAW;IAAG,CAAC;IAC1CE,QAAQ,EAAG,GAAE3B,KAAK,CAAC4B,aAAc,KAAI5B,KAAK,CAAC6B,IAAK,KAAI7B,KAAK,CAAC8B,KAAM,KAAI9B,KAAK,CAAC+B,OAAQ;EACpF,CAAC;EAED1B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEQ,QAAQ,CAAC;EAExC,OAAOtB,QAAQ,CACb,YAAY;IACV,OAAO,MAAMwC,KAAK,CAACvB,GAAG,EAAE;MACtBwB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAGhC,OAAO,CAACK,cAAc;QACnD,cAAc,EAAE;MAClB,CAAC;MACD4B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACvB,QAAQ;IAC/B,CAAC,CAAC,CAACwB,IAAI,CAACC,QAAQ,IAAI;MAClB,MAAMC,SAAS,GAAGD,QAAQ,CAACL,OAAO,CAACO,GAAG,CAAC,uBAAuB,CAAC;MAC/D,MAAMC,KAAK,GAAGH,QAAQ,CAACL,OAAO,CAACO,GAAG,CAAC,mBAAmB,CAAC;MACvD,MAAME,KAAK,GAAGJ,QAAQ,CAACL,OAAO,CAACO,GAAG,CAAC,mBAAmB,CAAC;MACvDrC,gBAAgB,CAAC;QAAEoC,SAAS;QAAEE,KAAK;QAAEC;MAAM,CAAC,CAAC;MAE7C,OAAOJ,QAAQ,CAACK,IAAI,EAAE;IACxB,CAAC,CAAC,CAACN,IAAI,CAACO,IAAI,IAAI;MACdxC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEuC,IAAI,CAAC;MACvD,IAAIA,IAAI,CAACrC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEqC,IAAI,CAACrC,KAAK,CAAC;QAClD,IAAIqC,IAAI,CAACrC,KAAK,CAACsC,IAAI,KAAK,GAAG,EAAE;UAC3BzC,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAC;UAC3CL,OAAO,EAAE,CAAC,CAAC;QACb;;QACA,OAAO,IAAI;MACb,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEuC,IAAI,CAAC;QACpD,OAAOA,IAAI,CAACE,EAAE;MAChB;IACF,CAAC,CAAC,CAACC,KAAK,CAACxC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;EACxE,CAAC,EACD,IAAI,CAAC;EAAA,CACN;AACH;;AAIA,eAAeyC,+BAA+B,CAACC,gBAAgB,EAAEC,aAAa,EAAE;EAC9E9C,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE6C,aAAa,CAAC;EAEzE,MAAM1C,GAAG,GAAI,mEAAkEyC,gBAAiB,EAAC;EACjG,MAAME,UAAU,GAAG;IACjBC,MAAM,EAAE;MACNC,aAAa,EAAEH;IACjB;EACF,CAAC;EAED9C,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE8C,UAAU,CAAC;EAEhD,OAAO,MAAMpB,KAAK,CAACvB,GAAG,EAAE;IACtBwB,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACP,eAAe,EAAE,2FAA2F;MAC5G,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACe,UAAU;EACjC,CAAC,CAAC,CAACd,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACK,IAAI,EAAE,CAAC,CACjCN,IAAI,CAACO,IAAI,IAAI;IACZxC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEuC,IAAI,CAAC;IACtD,IAAIA,IAAI,CAACrC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,+CAA+C,EAAEqC,IAAI,CAACrC,KAAK,CAAC;IAC5E,CAAC,MAAM;MACLH,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEuC,IAAI,CAAC;IAC5D;EACF,CAAC,CAAC,CAACG,KAAK,CAACxC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;AAC1E;AAEA,eAAe+C,mBAAmB,GAAiB;EAAA,IAAhBC,UAAU,uEAAG,CAAC;EAC/CnD,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAE5C,MAAMG,GAAG,GAAI,iEAAgE;EAC7E,MAAMgD,UAAU,GAAG,CAAC;EAEpB,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAMP,KAAK,CAACvB,GAAG,EAAE;MAChCyB,OAAO,EAAE;QACP,eAAe,EAAE,2FAA2F;QAC5G,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACK,QAAQ,CAACmB,EAAE,EAAE;MAChB,IAAInB,QAAQ,CAACoB,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,UAAU,GAAGrB,QAAQ,CAACL,OAAO,CAACO,GAAG,CAAC,aAAa,CAAC;QACtD,MAAMoB,QAAQ,GAAGD,UAAU,GAAGE,QAAQ,CAACF,UAAU,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,UAAU,CAAC,GAAG,IAAI;QAE1FnD,OAAO,CAAC4D,IAAI,CAAE,kCAAiCJ,QAAS,OAAM,CAAC;QAE/D,IAAIL,UAAU,GAAGC,UAAU,EAAE;UAC3B,MAAM,IAAIS,OAAO,CAACC,OAAO,IAAIrE,UAAU,CAACqE,OAAO,EAAEN,QAAQ,CAAC,CAAC;UAC3D,OAAON,mBAAmB,CAACC,UAAU,GAAG,CAAC,CAAC;QAC5C,CAAC,MAAM;UACL,MAAM,IAAIY,KAAK,CAAC,sBAAsB,CAAC;QACzC;MACF,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAE,uBAAsB7B,QAAQ,CAACoB,MAAO,EAAC,CAAC;MAC3D;IACF;IAEA,MAAMd,IAAI,GAAG,MAAMN,QAAQ,CAACK,IAAI,EAAE;IAClCvC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEuC,IAAI,CAAC;IAEhD,OAAOA,IAAI,CAACwB,OAAO,CAChBC,MAAM,CAACC,MAAM,IAAIA,MAAM,CAAClB,MAAM,CAAC,qBAAqB,CAAC,IAAIkB,MAAM,CAAClB,MAAM,CAAC,WAAW,CAAC,IAAIkB,MAAM,CAAClB,MAAM,CAAC,SAAS,CAAC,CAAC,CAChHmB,GAAG,CAACD,MAAM;MAAA;MAAA,OAAK;QACdxB,EAAE,EAAEwB,MAAM,CAACxB,EAAE;QACb/B,KAAK,EAAEuD,MAAM,CAAClB,MAAM,CAAC,qBAAqB,CAAC,IAAI,gBAAgB;QAC/D9B,KAAK,EAAE,IAAIkD,IAAI,CAACF,MAAM,CAAClB,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3C3B,GAAG,EAAE,IAAI+C,IAAI,CAACF,MAAM,CAAClB,MAAM,CAAC,SAAS,CAAC,CAAC;QACvCpC,WAAW,EAAEsD,MAAM,CAAClB,MAAM,CAAC,+BAA+B,CAAC,IAAI,EAAE;QACjEqB,MAAM,EAAEH,MAAM,CAAClB,MAAM,CAAC,GAAG,CAAC,IAAI,SAAS;QACvCnC,aAAa,EAAEqD,MAAM,CAAClB,MAAM,CAAC,gBAAgB,CAAC,IAAI,SAAS;QAC3DlC,SAAS,EAAEoD,MAAM,CAAClB,MAAM,CAAC,YAAY,CAAC,IAAI,SAAS;QACnDjC,SAAS,EAAEmD,MAAM,CAAClB,MAAM,CAAC,wBAAwB,CAAC,IAAI,SAAS;QAC/DhC,YAAY,EAAEkD,MAAM,CAAClB,MAAM,CAAC,eAAe,CAAC,IAAI,SAAS;QACzD/B,YAAY,EAAEiD,MAAM,CAAClB,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE;QAClD1C,WAAW,EAAE,0BAAA4D,MAAM,CAAClB,MAAM,CAAC,qBAAqB,CAAC,0DAApC,sBAAsCmB,GAAG,CAACG,GAAG,IAAIA,GAAG,CAAClE,GAAG,CAAC,KAAI,EAAE;QAC5EmB,aAAa,EAAE2C,MAAM,CAAClB,MAAM,CAAC,gBAAgB,CAAC,IAAI,SAAS;QAC3DxB,IAAI,EAAE0C,MAAM,CAAClB,MAAM,CAAC,MAAM,CAAC,IAAI,SAAS;QACxCvB,KAAK,EAAEyC,MAAM,CAAClB,MAAM,CAAC,OAAO,CAAC,IAAI,SAAS;QAC1CtB,OAAO,EAAEwC,MAAM,CAAClB,MAAM,CAAC,UAAU,CAAC,IAAI,SAAS;QAC/CF,aAAa,EAAEoB,MAAM,CAAClB,MAAM,CAAC,eAAe,CAAC,IAAI;MACnD,CAAC;IAAA,CAAC,CAAC;EAEP,CAAC,CAAC,OAAO7C,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAE5D,IAAIgD,UAAU,GAAGC,UAAU,EAAE;MAC3BpD,OAAO,CAACC,GAAG,CAAE,0BAAyBkD,UAAU,GAAG,CAAE,OAAMC,UAAW,KAAI,CAAC;MAC3E,OAAOF,mBAAmB,CAACC,UAAU,GAAG,CAAC,CAAC;IAC5C,CAAC,MAAM;MACL,MAAMhD,KAAK;IACb;EACF;AACF;AAMA,eAAeoE,sBAAsB,CAAC5E,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAChE,MAAMO,GAAG,GAAI,oDAAmDR,UAAW,mBAAkBD,KAAK,CAACuB,KAAK,CAACE,WAAW,EAAG,YAAWzB,KAAK,CAAC0B,GAAG,CAACD,WAAW,EAAG,EAAC;EAE3J,MAAMc,QAAQ,GAAG,MAAMP,KAAK,CAACvB,GAAG,EAAE;IAChCyB,OAAO,EAAE;MACP,eAAe,EAAE,SAAS,GAAGhC,OAAO,CAACK;IACvC;EACF,CAAC,CAAC;EAEF,MAAMsC,IAAI,GAAG,MAAMN,QAAQ,CAACK,IAAI,EAAE;EAElC,IAAIC,IAAI,CAACgC,KAAK,EAAE;IACd,OAAOhC,IAAI,CAACgC,KAAK,CAACC,IAAI,CAACC,aAAa,IAClCA,aAAa,CAAChE,OAAO,KAAKf,KAAK,CAACgB,KAAK,IACrC+D,aAAa,CAACpD,QAAQ,KAAM,GAAE3B,KAAK,CAAC4B,aAAc,KAAI5B,KAAK,CAAC6B,IAAK,KAAI7B,KAAK,CAAC8B,KAAM,KAAI9B,KAAK,CAAC+B,OAAQ,EAAC,CACrG;EACH;EAEA,OAAO,KAAK;AACd;AAEA,SAASiD,KAAK,CAACC,EAAE,EAAE;EACjB,OAAO,IAAIf,OAAO,CAACC,OAAO,IAAIrE,UAAU,CAACqE,OAAO,EAAEc,EAAE,CAAC,CAAC;AACxD;AAEA,eAAeC,yCAAyC,CAACjF,UAAU,EAAEkF,YAAY,EAAEjF,OAAO,EAAEC,OAAO,EAAEiF,eAAe,EAAEC,gBAAgB,EAAEjF,gBAAgB,EAAE;EACxJC,OAAO,CAACC,GAAG,CAAE,+BAA8B6E,YAAa,4BAA2B,CAAC;EAEpF,MAAMG,cAAc,GAAG,MAAM/B,mBAAmB,EAAE;EAClD,MAAMgC,KAAK,GAAG,EAAE;EAChB,MAAMC,MAAM,GAAG,EAAE;EAEjB,KAAK,MAAMxF,KAAK,IAAIsF,cAAc,EAAE;IAClC;IACA,IAAItF,KAAK,CAAC0E,MAAM,CAACe,WAAW,EAAE,KAAK,SAAS,IAAIzF,KAAK,CAAC0E,MAAM,CAACe,WAAW,EAAE,KAAKN,YAAY,CAACM,WAAW,EAAE,EAAE;MACzGpF,OAAO,CAACC,GAAG,CAAE,mBAAkBN,KAAK,CAACgB,KAAM,oBAAmBhB,KAAK,CAAC0E,MAAO,mBAAkBS,YAAa,sBAAqB,CAAC;MAChI;IACF;IAEA,IAAInF,KAAK,CAACmD,aAAa,EAAE;MACvB9C,OAAO,CAACC,GAAG,CAAE,kCAAiCN,KAAK,CAACgB,KAAM,EAAC,CAAC;MAC5D;IACF;IAEA,MAAM0E,WAAW,GAAG,MAAMd,sBAAsB,CAAC5E,KAAK,EAAEC,UAAU,EAAEC,OAAO,CAAC;IAC5E,IAAIwF,WAAW,EAAE;MACfrF,OAAO,CAACC,GAAG,CAAE,2BAA0BN,KAAK,CAACgB,KAAM,gBAAe,CAAC;MACnEwE,MAAM,CAACG,IAAI,CAAC3F,KAAK,CAACgB,KAAK,CAAC;MACxB;IACF;IAEA,MAAMmC,aAAa,GAAG,MAAMpD,yBAAyB,CAACC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEC,gBAAgB,CAAC;IAC5G,IAAI+C,aAAa,EAAE;MACjB9C,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE6C,aAAa,CAAC;MAC1D,MAAMF,+BAA+B,CAACjD,KAAK,CAAC+C,EAAE,EAAEI,aAAa,CAAC;MAC9DoC,KAAK,CAACI,IAAI,CAAC3F,KAAK,CAACgB,KAAK,CAAC;IACzB,CAAC,MAAM;MACLwE,MAAM,CAACG,IAAI,CAAC3F,KAAK,CAACgB,KAAK,CAAC;IAC1B;;IAEA;IACA,MAAMgE,KAAK,CAAC,MAAM,CAAC;EACrB;EAEAI,eAAe,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGL,KAAK,CAAC,CAAC;EAC5CF,gBAAgB,CAACO,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGJ,MAAM,CAAC,CAAC;EAE9CnF,OAAO,CAACC,GAAG,CAAE,wCAAuC6E,YAAa,0BAAyB,CAAC;AAC7F;AAGA,SAASU,eAAe,OAAsG;EAAA;EAAA,IAArG;IAAE5F,UAAU;IAAEkF,YAAY;IAAEjF,OAAO;IAAEC,OAAO;IAAEiF,eAAe;IAAEC,gBAAgB;IAAEjF;EAAiB,CAAC;EAC1H,MAAM,CAAC0F,YAAY,EAAEC,eAAe,CAAC,GAAG5G,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACdiB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,OAAO,CAAC;IAEtC,MAAM8F,UAAU,GAAG,MAAM;MACvB,MAAMC,GAAG,GAAG,IAAIxB,IAAI,EAAE;;MAEtB;MACA,IAAIqB,YAAY,IAAKG,GAAG,GAAGH,YAAY,GAAI,MAAM,EAAE;QACjDzF,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;QACpE;MACF;MAEA,IAAIJ,OAAO,EAAE;QACX,IAAI,CAACA,OAAO,CAACK,cAAc,EAAE;UAC3BF,OAAO,CAACG,KAAK,CAAC,4CAA4C,CAAC;UAC3DL,OAAO,EAAE;UACT;QACF;QAEA+E,yCAAyC,CACvCjF,UAAU,EACVkF,YAAY,EACZjF,OAAO,EACPC,OAAO,EACPiF,eAAe,EACfC,gBAAgB,EAChBjF,gBAAgB,CACjB,CACEkC,IAAI,CAAC,MAAM;UACVjC,OAAO,CAACC,GAAG,CAAE,wDAAuD6E,YAAa,GAAE,CAAC;UACpFY,eAAe,CAAC,IAAItB,IAAI,EAAE,CAAC,CAAC,CAAE;QAChC,CAAC,CAAC,CACDzB,KAAK,CAACxC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAE,8CAA6C2E,YAAa,IAAG,EAAE3E,KAAK,CAAC,CAAC;MACzG;IACF,CAAC;;IAED;IACAwF,UAAU,EAAE;;IAEZ;IACA,MAAME,UAAU,GAAGC,WAAW,CAACH,UAAU,EAAE,KAAK,CAAC;;IAEjD;IACA,OAAO,MAAMI,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAAChG,OAAO,EAAEC,OAAO,EAAEF,UAAU,EAAEkF,YAAY,EAAEC,eAAe,EAAEC,gBAAgB,EAAEjF,gBAAgB,EAAE0F,YAAY,CAAC,CAAC;EAEnH,oBACE;IAAK,SAAS,EAAC,eAAe;IAAA,uBAC5B;MAAA,UAAKX;IAAY;MAAA;MAAA;MAAA;IAAA;EAAM;IAAA;IAAA;IAAA;EAAA,QACnB;AAEV;AAAC,GAtDQU,eAAe;AAAA,KAAfA,eAAe;AA0DxB,SAASQ,GAAG,GAAG;EAAA;EACb,MAAMnG,OAAO,GAAGb,UAAU,EAAE;EAC5B,MAAMiH,QAAQ,GAAGhH,iBAAiB,EAAE;EACpC,MAAM;IAAEiH;EAAU,CAAC,GAAGhH,iBAAiB,EAAE;EAEzC,MAAM,CAACiH,YAAY,EAAEpB,eAAe,CAAC,GAAGjG,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsH,aAAa,EAAEpB,gBAAgB,CAAC,GAAGlG,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACuH,aAAa,EAAEtG,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC;IAAEqD,SAAS,EAAE,IAAI;IAAEE,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;;EAEjG;EACA,MAAMgE,YAAY,GAAG,CACnB;IAAE5D,EAAE,EAAE,8FAA8F;IAAE6D,IAAI,EAAE;EAAa,CAAC,EAC1H;IAAE7D,EAAE,EAAE,8FAA8F;IAAE6D,IAAI,EAAE;EAAa,CAAC,EAC1H;IAAE7D,EAAE,EAAE,8FAA8F;IAAE6D,IAAI,EAAE;EAAe,CAAC,EAC5H;IAAE7D,EAAE,EAAE,8FAA8F;IAAE6D,IAAI,EAAE;EAAa,CAAC,EAC1H;IAAE7D,EAAE,EAAE,qKAAqK;IAAE6D,IAAI,EAAE;EAAW,CAAC,EAC/L;IAAE7D,EAAE,EAAE,qKAAqK;IAAE6D,IAAI,EAAE;EAAU,CAAC,EAC9L;IAAE7D,EAAE,EAAE,kCAAkC;IAAE6D,IAAI,EAAE;EAAU,CAAC,CAC5D,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACF,IAAI,CAACI,aAAa,CAACD,CAAC,CAACH,IAAI,CAAC,CAAC;EAE9C,MAAMK,WAAW,GAAG,MAAM;IACxB,MAAMC,WAAW,GAAG,IAAIzC,IAAI,EAAE,CAAC0C,QAAQ,EAAE;IACzC,IAAID,WAAW,GAAG,EAAE,EAAE;MACpB,OAAO,cAAc;IACvB,CAAC,MAAM,IAAIA,WAAW,GAAG,EAAE,EAAE;MAC3B,OAAO,gBAAgB;IACzB,CAAC,MAAM;MACL,OAAO,cAAc;IACvB;EACF,CAAC;EAED,IAAIX,SAAS,EAAE;IACb,oBAAO;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM;EAC9B;EAEA,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAK,SAAS,EAAC,WAAW;MAAA,wBACxB;QAAA,UAAI;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAK,eAC1B;QAAK,KAAK,EAAE;UAAEa,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAS,CAAE;QAAA,UAC7CnH,OAAO,gBACN;UAAA,wBACE;YAAA,WAAK+G,WAAW,EAAE,EAAC,GAAC,EAAC/G,OAAO,CAACoH,IAAI,CAACC,KAAK;UAAA;YAAA;YAAA;YAAA;UAAA,QAAM,eAC7C;YAAA;YAAA;YAAA;UAAA,QAAM,eACN;YAAK,SAAS,EAAC,eAAe;YAAA,UAC3BZ,YAAY,CAACnC,GAAG,CAACgD,QAAQ,iBACxB,QAAC,eAAe;cAEd,UAAU,EAAEA,QAAQ,CAACzE,EAAG;cACxB,YAAY,EAAEyE,QAAQ,CAACZ,IAAK;cAC5B,OAAO,EAAE1G,OAAQ;cACjB,OAAO,EAAE,MAAMoG,QAAQ,CAACmB,IAAI,CAACtH,OAAO,EAAG;cACvC,eAAe,EAAEiF,eAAgB;cACjC,gBAAgB,EAAEC,gBAAiB;cACnC,gBAAgB,EAAEjF;YAAiB,GAP9BoH,QAAQ,CAACzE,EAAE;cAAA;cAAA;cAAA;YAAA,QASnB;UAAC;YAAA;YAAA;YAAA;UAAA,QACE,eACN;YAAK,SAAS,EAAC,iBAAiB;YAAA,wBAC9B;cAAA,UAAI;YAAe;cAAA;cAAA;cAAA;YAAA,QAAK,eACxB;cAAK,SAAS,EAAC,mBAAmB;cAAA,wBAChC;gBAAK,SAAS,EAAC,eAAe;gBAAA,wBAC5B;kBAAA,UAAI;gBAA2B;kBAAA;kBAAA;kBAAA;gBAAA,QAAK,EACnCyD,YAAY,CAAC5F,MAAM,GAAG,CAAC,gBACtB;kBAAA,UACG4F,YAAY,CAAChC,GAAG,CAAC,CAACD,MAAM,EAAEmD,KAAK,kBAC9B;oBAAA,UAAiBnD;kBAAM,GAAdmD,KAAK;oBAAA;oBAAA;oBAAA;kBAAA,QACf;gBAAC;kBAAA;kBAAA;kBAAA;gBAAA,QACC,gBAEL;kBAAA,UAAG;gBAAiB;kBAAA;kBAAA;kBAAA;gBAAA,QACrB;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACG,eACN;gBAAK,SAAS,EAAC,gBAAgB;gBAAA,wBAC7B;kBAAA,UAAI;gBAAsB;kBAAA;kBAAA;kBAAA;gBAAA,QAAK,EAC9BjB,aAAa,CAAC7F,MAAM,GAAG,CAAC,gBACvB;kBAAA,UACG6F,aAAa,CAACjC,GAAG,CAAC,CAACD,MAAM,EAAEmD,KAAK,kBAC/B;oBAAA,UAAiBnD;kBAAM,GAAdmD,KAAK;oBAAA;oBAAA;oBAAA;kBAAA,QACf;gBAAC;kBAAA;kBAAA;kBAAA;gBAAA,QACC,gBAEL;kBAAA,UAAG;gBAAkB;kBAAA;kBAAA;kBAAA;gBAAA,QACtB;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACG;YAAA;cAAA;cAAA;cAAA;YAAA,QACF;UAAA;YAAA;YAAA;YAAA;UAAA,QACF,eACN;YAAK,SAAS,EAAC,iBAAiB;YAAA,wBAC9B;cAAA,UAAI;YAA2C;cAAA;cAAA;cAAA;YAAA,QAAK,EACnDhB,aAAa,CAAChE,KAAK,KAAK,IAAI,gBAC3B;cAAA,wBACE;gBAAA,WAAI,SAAO,EAACgE,aAAa,CAAChE,KAAK;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAM,eACrC;gBAAA,WAAI,aAAW,EAACgE,aAAa,CAAClE,SAAS;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAM,eAC7C;gBAAA,WAAI,cAAY,EAAC,IAAIiC,IAAI,CAACiC,aAAa,CAAC/D,KAAK,GAAG,IAAI,CAAC,CAACgF,kBAAkB,EAAE;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAM;YAAA;cAAA;cAAA;cAAA;YAAA,QAC7E,gBAEL;cAAA,UAAG;YAAoC;cAAA;cAAA;cAAA;YAAA,QACxC;UAAA;YAAA;YAAA;YAAA;UAAA,QACG,eACN;YAAA;YAAA;YAAA;UAAA,QAAO,eACP;YAAQ,OAAO,EAAE,MAAMrB,QAAQ,CAACmB,IAAI,CAACtH,OAAO,EAAG;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAS;QAAA,gBAChE,gBAEH;UAAA,uBACE;YAAQ,OAAO,EAAE,MAAMmG,QAAQ,CAACmB,IAAI,CAACG,eAAe,CAAC;cAAEC,QAAQ,EAAE,QAAQ;cAAEC,OAAO,EAAE;gBAAEC,MAAM,EAAE;cAA2C;YAAE,CAAC,CAAE;YAAA,UAAC;UAE/I;YAAA;YAAA;YAAA;UAAA;QAAS;MACR;QAAA;QAAA;QAAA;MAAA,QAED;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,IAjHQ1B,GAAG;EAAA,QACMhH,UAAU,EACTC,iBAAiB,EACZC,iBAAiB;AAAA;AAAA,MAHhC8G,GAAG;AAmHZ,eAAeA,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}