{"ast":null,"code":"var _jsxFileName = \"/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Debounce function to avoid rapid API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// Fetch added records from Airtable\nasync function fetchAddedRecordsFromAirtable() {\n  console.log('Fetching added records from Airtable...');\n  try {\n    const response = await fetch('https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ', {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238'\n      }\n    });\n    const data = await response.json();\n    console.log('Fetched added records:', data);\n    return data.records.filter(record => record.fields['Status'] === 'Added').map(record => record.fields['YourRecordFieldName']);\n  } catch (error) {\n    console.error('Error fetching added records from Airtable:', error);\n    return [];\n  }\n}\n\n// Fetch failed records from Airtable\nasync function fetchFailedRecordsFromAirtable() {\n  console.log('Fetching failed records from Airtable...');\n  try {\n    const response = await fetch('https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ', {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238'\n      }\n    });\n    const data = await response.json();\n    console.log('Fetched failed records:', data);\n    return data.records.filter(record => record.fields['Status'] === 'Failed').map(record => record.fields['YourRecordFieldName']);\n  } catch (error) {\n    console.error('Error fetching failed records from Airtable:', error);\n    return [];\n  }\n}\n\n// Helper function to get a greeting based on the time of day\nfunction getGreeting() {\n  const currentHour = new Date().getHours();\n  const greeting = currentHour < 12 ? \"Good morning\" : currentHour < 18 ? \"Good afternoon\" : \"Good evening\";\n  console.log(`Generated greeting: ${greeting}`);\n  return greeting;\n}\n\n// Function to create a Google Calendar event\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log('Attempting to create a new Google Calendar event:', event);\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n  const pictureUrlsDescription = event.pictureUrls.length > 0 ? 'Pictures of Issue:\\n' + event.pictureUrls.join('\\n') : 'No pictures provided.';\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description ? event.description + '\\n' : ''}\n      Homeowner Name: ${event.homeownerName}\n      Lot Number: ${event.lotNumber}\n      Community/Neighborhood: ${event.community}\n      Contact Email: ${event.contactEmail}\n      Calendar Link: ${event.calendarLink ? event.calendarLink : 'Not Provided'}\n      ${pictureUrlsDescription}\n    `,\n    start: {\n      dateTime: event.start.toISOString()\n    },\n    end: {\n      dateTime: event.end.toISOString()\n    },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n  };\n  console.log('New event data to be sent to Google Calendar:', newEvent);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    });\n\n    // Capture rate limit info from headers\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({\n      remaining,\n      limit,\n      reset\n    });\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n    if (data.error) {\n      console.error('Error creating event:', data.error);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut(); // Logout if unauthorized\n      }\n\n      return null;\n    } else {\n      console.log('New event successfully created with ID:', data.id);\n      return data.id;\n    }\n  } catch (error) {\n    console.error('Error during fetch request to create Google Calendar event:', error);\n    return null;\n  }\n}\n\n// Function to update Airtable with the Google Event ID\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with new Google Event ID: ${googleEventId}`);\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId\n    }\n  };\n  console.log('Data to be sent to Airtable for update:', updateData);\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    const data = await response.json();\n    console.log('Airtable API response for record update:', data);\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated:', data);\n    }\n  } catch (error) {\n    console.error('Error during fetch request to update Airtable:', error);\n  }\n}\n\n// Fetch events from Airtable\nasync function fetchAirtableEvents() {\n  let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  console.log('Fetching events from Airtable...');\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1);\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Fetched data from Airtable:', data);\n    return data.records.filter(record => record.fields['Calendar Event Name'] && record.fields['startDate'] && record.fields['endDate']).map(record => {\n      var _record$fields$Pictur;\n      return {\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || \"Untitled Event\",\n        start: new Date(record.fields['startDate']),\n        end: new Date(record.fields['endDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        lotNumber: record.fields['Lot Number'] || 'Unknown',\n        community: record.fields['Community/Neighborhood'] || 'Unknown',\n        contactEmail: record.fields['Contact Email'] || 'Unknown',\n        calendarLink: record.fields['Calendar Link'] || '',\n        pictureUrls: ((_record$fields$Pictur = record.fields['Picture(s) of Issue']) === null || _record$fields$Pictur === void 0 ? void 0 : _record$fields$Pictur.map(pic => pic.url)) || [],\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error;\n    }\n  }\n}\n\n// Function to check for duplicate events in Google Calendar\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  console.log(`Checking for duplicate events in Google Calendar for event: ${event.title}`);\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token\n      }\n    });\n    const data = await response.json();\n    console.log('Fetched events from Google Calendar for duplicate check:', data);\n    if (data.items) {\n      const isDuplicate = data.items.some(existingEvent => existingEvent.summary === event.title && existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`);\n      console.log(`Is event \"${event.title}\" a duplicate? ${isDuplicate}`);\n      return isDuplicate;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error during duplicate check in Google Calendar:', error);\n    return false;\n  }\n}\n\n// Function to introduce a delay\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Function to populate Google Calendar with records from Airtable\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Populating Google Calendar (${calendarName}) with Airtable records...`);\n  const airtableEvents = await fetchAirtableEvents();\n  const added = [];\n  const failed = [];\n  for (const event of airtableEvents) {\n    // Skip events where the branch is \"Unknown\" or does not match the calendar name\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`);\n      continue;\n    }\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n    const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      failed.push(event.title);\n    }\n\n    // Introduce a delay of 1 second between requests\n    await sleep(1000);\n  }\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n  console.log(`Finished populating Google Calendar (${calendarName}) with Airtable records.`);\n}\n\n// Component to display each calendar section with countdown\nfunction CalendarSection(_ref) {\n  _s();\n  let {\n    calendarId,\n    calendarName,\n    session,\n    signOut,\n    setAddedRecords,\n    setFailedRecords,\n    setRateLimitInfo\n  } = _ref;\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  const [timeUntilNextSync, setTimeUntilNextSync] = useState(0);\n  useEffect(() => {\n    const calculateTimeUntilNextSync = () => {\n      const now = new Date();\n      if (lastSyncTime) {\n        const elapsed = now - lastSyncTime;\n        const remainingTime = 450000 - elapsed; // 450,000 ms = 7.5 minutes\n        setTimeUntilNextSync(Math.max(0, remainingTime));\n      }\n    };\n    const syncEvents = () => {\n      const now = new Date();\n\n      // Calculate time since last sync\n      if (lastSyncTime && now - lastSyncTime < 450000) {\n        calculateTimeUntilNextSync();\n        return;\n      }\n      if (session) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n        populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo).then(() => {\n          console.log(`Finished syncing Airtable events to Google Calendar (${calendarName})`);\n          setLastSyncTime(new Date()); // Update last sync time\n          setTimeUntilNextSync(450000); // Reset countdown\n        }).catch(error => console.error(`Error syncing Airtable to Google Calendar (${calendarName}):`, error));\n      }\n    };\n\n    // Run syncEvents immediately when the component mounts\n    syncEvents();\n\n    // Set up an interval to run syncEvents every 6.6 minutes (400000 ms)\n    const intervalId = setInterval(syncEvents, 400000);\n\n    // Update countdown every second\n    const countdownInterval = setInterval(() => {\n      calculateTimeUntilNextSync();\n    }, 1000);\n\n    // Clear the intervals when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n      clearInterval(countdownInterval);\n    };\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime]);\n\n  // Convert milliseconds to mm:ss format\n  const formatTime = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: calendarName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), timeUntilNextSync > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Next sync available in: \", formatTime(timeUntilNextSync)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ready to sync!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }, this);\n}\n\n// Main App component\n_s(CalendarSection, \"RvVRpdC20m1bcitDl4kk/qtsNJg=\");\n_c = CalendarSection;\nfunction App() {\n  _s2();\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    remaining: null,\n    limit: null,\n    reset: null\n  });\n  useEffect(() => {\n    // Fetch existing records from Airtable or another source if needed\n    async function fetchExistingRecords() {\n      console.log('Fetching existing records from Airtable...');\n      const existingAddedRecords = await fetchAddedRecordsFromAirtable();\n      const existingFailedRecords = await fetchFailedRecordsFromAirtable();\n      console.log('Fetched existing records:', {\n        existingAddedRecords,\n        existingFailedRecords\n      });\n      setAddedRecords(existingAddedRecords);\n      setFailedRecords(existingFailedRecords);\n    }\n    fetchExistingRecords();\n  }, []);\n  const calendarInfo = [{\n    id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com',\n    name: 'Savannah'\n  }].sort((a, b) => a.name.localeCompare(b.name));\n  const handleManualSync = async () => {\n    console.log('Manual sync initiated...');\n    if (!session) return;\n    for (const calendar of calendarInfo) {\n      console.log(`Syncing data for calendar: ${calendar.name}`);\n      await populateGoogleCalendarWithAirtableRecords(calendar.id, calendar.name, session, () => supabase.auth.signOut(), setAddedRecords, setFailedRecords, setRateLimitInfo);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warranty Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          margin: \"0 auto\"\n        },\n        children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getGreeting(), \" \", session.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-grid\",\n            children: calendarInfo.map(calendar => /*#__PURE__*/_jsxDEV(CalendarSection, {\n              calendarId: calendar.id,\n              calendarName: calendar.name,\n              session: session,\n              signOut: () => supabase.auth.signOut(),\n              setAddedRecords: setAddedRecords,\n              setFailedRecords: setFailedRecords,\n              setRateLimitInfo: setRateLimitInfo\n            }, calendar.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"records-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Records Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"added-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Successfully Added Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 493,\n                  columnNumber: 21\n                }, this), addedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: addedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 497,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records added.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 501,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"failed-records\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Failed to Add Records:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 21\n                }, this), failedRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: failedRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: record\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 509,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 507,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No records failed.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 513,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rate-limit-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Google Calendar API Rate Limit Information:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 17\n            }, this), rateLimitInfo.limit !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Limit: \", rateLimitInfo.limit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Remaining: \", rateLimitInfo.remaining]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Reset Time: \", new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No rate limit information available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleManualSync,\n            children: \"Sync Data Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signOut(),\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => supabase.auth.signInWithOAuth({\n              provider: 'google',\n              options: {\n                scopes: 'https://www.googleapis.com/auth/calendar'\n              }\n            }),\n            children: \"Sign In With Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"QzHJZWewOVsV7rerRGPFEonIZSs=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarSection\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useSession","useSupabaseClient","useSessionContext","debounce","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout","fetchAddedRecordsFromAirtable","console","log","response","fetch","headers","Authorization","data","json","records","filter","record","fields","map","error","fetchFailedRecordsFromAirtable","getGreeting","currentHour","Date","getHours","greeting","createGoogleCalendarEvent","event","calendarId","session","signOut","setRateLimitInfo","provider_token","url","pictureUrlsDescription","pictureUrls","length","join","newEvent","summary","title","description","homeownerName","lotNumber","community","contactEmail","calendarLink","start","dateTime","toISOString","end","location","streetAddress","city","state","zipCode","method","body","JSON","stringify","remaining","get","limit","reset","code","id","updateAirtableWithGoogleEventId","airtableRecordId","googleEventId","updateData","GoogleEventId","fetchAirtableEvents","retryCount","maxRetries","ok","status","retryAfter","waitTime","parseInt","Math","pow","warn","Promise","resolve","Error","branch","pic","checkForDuplicateEvent","items","isDuplicate","some","existingEvent","sleep","ms","populateGoogleCalendarWithAirtableRecords","calendarName","setAddedRecords","setFailedRecords","airtableEvents","added","failed","toLowerCase","push","prev","CalendarSection","lastSyncTime","setLastSyncTime","timeUntilNextSync","setTimeUntilNextSync","calculateTimeUntilNextSync","now","elapsed","remainingTime","max","syncEvents","then","catch","intervalId","setInterval","countdownInterval","clearInterval","formatTime","totalSeconds","floor","minutes","seconds","String","padStart","App","supabase","isLoading","addedRecords","failedRecords","rateLimitInfo","fetchExistingRecords","existingAddedRecords","existingFailedRecords","calendarInfo","name","sort","a","b","localeCompare","handleManualSync","calendar","auth","width","margin","user","email","index","toLocaleTimeString","signInWithOAuth","provider","options","scopes"],"sources":["/Users/richardmcgirt/Desktop/Warrenty2-/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\n\n// Debounce function to avoid rapid API calls\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// Fetch added records from Airtable\nasync function fetchAddedRecordsFromAirtable() {\n  console.log('Fetching added records from Airtable...');\n  try {\n    const response = await fetch('https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ', {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238'\n      }\n    });\n\n    const data = await response.json();\n    console.log('Fetched added records:', data);\n    return data.records\n      .filter(record => record.fields['Status'] === 'Added')\n      .map(record => record.fields['YourRecordFieldName']);\n  } catch (error) {\n    console.error('Error fetching added records from Airtable:', error);\n    return [];\n  }\n}\n\n// Fetch failed records from Airtable\nasync function fetchFailedRecordsFromAirtable() {\n  console.log('Fetching failed records from Airtable...');\n  try {\n    const response = await fetch('https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ', {\n      headers: {\n        Authorization: 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238'\n      }\n    });\n\n    const data = await response.json();\n    console.log('Fetched failed records:', data);\n    return data.records\n      .filter(record => record.fields['Status'] === 'Failed')\n      .map(record => record.fields['YourRecordFieldName']);\n  } catch (error) {\n    console.error('Error fetching failed records from Airtable:', error);\n    return [];\n  }\n}\n\n// Helper function to get a greeting based on the time of day\nfunction getGreeting() {\n  const currentHour = new Date().getHours();\n  const greeting = currentHour < 12 ? \"Good morning\" : currentHour < 18 ? \"Good afternoon\" : \"Good evening\";\n  console.log(`Generated greeting: ${greeting}`);\n  return greeting;\n}\n\n// Function to create a Google Calendar event\nasync function createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo) {\n  console.log('Attempting to create a new Google Calendar event:', event);\n\n  if (!session.provider_token) {\n    console.error('No valid session token available. Logging out.');\n    signOut();\n    return null;\n  }\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;\n\n  const pictureUrlsDescription = event.pictureUrls.length > 0 \n    ? 'Pictures of Issue:\\n' + event.pictureUrls.join('\\n')\n    : 'No pictures provided.';\n\n  const newEvent = {\n    summary: event.title,\n    description: `\n      ${event.description ? event.description + '\\n' : ''}\n      Homeowner Name: ${event.homeownerName}\n      Lot Number: ${event.lotNumber}\n      Community/Neighborhood: ${event.community}\n      Contact Email: ${event.contactEmail}\n      Calendar Link: ${event.calendarLink ? event.calendarLink : 'Not Provided'}\n      ${pictureUrlsDescription}\n    `,\n    start: { dateTime: event.start.toISOString() },\n    end: { dateTime: event.end.toISOString() },\n    location: `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`,\n  };\n\n  console.log('New event data to be sent to Google Calendar:', newEvent);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    });\n\n    // Capture rate limit info from headers\n    const remaining = response.headers.get('X-RateLimit-Remaining');\n    const limit = response.headers.get('X-RateLimit-Limit');\n    const reset = response.headers.get('X-RateLimit-Reset');\n    setRateLimitInfo({ remaining, limit, reset });\n\n    const data = await response.json();\n    console.log('Google Calendar API response:', data);\n\n    if (data.error) {\n      console.error('Error creating event:', data.error);\n      if (data.error.code === 401) {\n        console.error('Unauthorized - Logging out');\n        signOut(); // Logout if unauthorized\n      }\n      return null;\n    } else {\n      console.log('New event successfully created with ID:', data.id);\n      return data.id;\n    }\n  } catch (error) {\n    console.error('Error during fetch request to create Google Calendar event:', error);\n    return null;\n  }\n}\n\n// Function to update Airtable with the Google Event ID\nasync function updateAirtableWithGoogleEventId(airtableRecordId, googleEventId) {\n  console.log(`Updating Airtable record ${airtableRecordId} with new Google Event ID: ${googleEventId}`);\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ/${airtableRecordId}`;\n  const updateData = {\n    fields: {\n      GoogleEventId: googleEventId\n    }\n  };\n\n  console.log('Data to be sent to Airtable for update:', updateData);\n\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n\n    const data = await response.json();\n    console.log('Airtable API response for record update:', data);\n\n    if (data.error) {\n      console.error('Error updating Airtable with Google Event ID:', data.error);\n    } else {\n      console.log('Airtable record successfully updated:', data);\n    }\n  } catch (error) {\n    console.error('Error during fetch request to update Airtable:', error);\n  }\n}\n\n// Fetch events from Airtable\nasync function fetchAirtableEvents(retryCount = 0) {\n  console.log('Fetching events from Airtable...');\n\n  const url = `https://api.airtable.com/v0/appO21PVRA4Qa087I/tbl6EeKPsNuEvt5yJ`;\n  const maxRetries = 1;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer patXTUS9m8os14OO1.6a81b7bc4dd88871072fe71f28b568070cc79035bc988de3d4228d52239c8238',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, retryCount) * 1000;\n\n        console.warn(`Rate limit hit. Retrying after ${waitTime}ms...`);\n\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          return fetchAirtableEvents(retryCount + 1);\n        } else {\n          throw new Error('Max retries exceeded');\n        }\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n\n    const data = await response.json();\n    console.log('Fetched data from Airtable:', data);\n\n    return data.records\n      .filter(record => record.fields['Calendar Event Name'] && record.fields['startDate'] && record.fields['endDate'])\n      .map(record => ({\n        id: record.id,\n        title: record.fields['Calendar Event Name'] || \"Untitled Event\",\n        start: new Date(record.fields['startDate']),\n        end: new Date(record.fields['endDate']),\n        description: record.fields['Billable Reason (If Billable)'] || '',\n        branch: record.fields['b'] || 'Unknown',\n        homeownerName: record.fields['Homeowner Name'] || 'Unknown',\n        lotNumber: record.fields['Lot Number'] || 'Unknown',\n        community: record.fields['Community/Neighborhood'] || 'Unknown',\n        contactEmail: record.fields['Contact Email'] || 'Unknown',\n        calendarLink: record.fields['Calendar Link'] || '',\n        pictureUrls: record.fields['Picture(s) of Issue']?.map(pic => pic.url) || [],\n        streetAddress: record.fields['Street Address'] || 'Unknown',\n        city: record.fields['City'] || 'Unknown',\n        state: record.fields['State'] || 'Unknown',\n        zipCode: record.fields['Zip Code'] || 'Unknown',\n        googleEventId: record.fields['GoogleEventId'] || null,\n      }));\n\n  } catch (error) {\n    console.error('Error fetching events from Airtable:', error);\n\n    if (retryCount < maxRetries) {\n      console.log(`Retrying fetch attempt ${retryCount + 1} of ${maxRetries}...`);\n      return fetchAirtableEvents(retryCount + 1);\n    } else {\n      throw error;\n    }\n  }\n}\n\n// Function to check for duplicate events in Google Calendar\nasync function checkForDuplicateEvent(event, calendarId, session) {\n  console.log(`Checking for duplicate events in Google Calendar for event: ${event.title}`);\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${event.start.toISOString()}&timeMax=${event.end.toISOString()}`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token,\n      },\n    });\n\n    const data = await response.json();\n    console.log('Fetched events from Google Calendar for duplicate check:', data);\n\n    if (data.items) {\n      const isDuplicate = data.items.some(existingEvent =>\n        existingEvent.summary === event.title &&\n        existingEvent.location === `${event.streetAddress}, ${event.city}, ${event.state}, ${event.zipCode}`\n      );\n      console.log(`Is event \"${event.title}\" a duplicate? ${isDuplicate}`);\n      return isDuplicate;\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error during duplicate check in Google Calendar:', error);\n    return false;\n  }\n}\n\n// Function to introduce a delay\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Function to populate Google Calendar with records from Airtable\nasync function populateGoogleCalendarWithAirtableRecords(calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo) {\n  console.log(`Populating Google Calendar (${calendarName}) with Airtable records...`);\n\n  const airtableEvents = await fetchAirtableEvents();\n  const added = [];\n  const failed = [];\n\n  for (const event of airtableEvents) {\n    // Skip events where the branch is \"Unknown\" or does not match the calendar name\n    if (event.branch.toLowerCase() === 'unknown' || event.branch.toLowerCase() !== calendarName.toLowerCase()) {\n      console.log(`Skipping event \"${event.title}\" due to branch \"${event.branch}\" not matching \"${calendarName}\" or being \"Unknown\"`);\n      continue;\n    }\n\n    if (event.googleEventId) {\n      console.log(`Skipping already synced event: ${event.title}`);\n      continue;\n    }\n\n    const isDuplicate = await checkForDuplicateEvent(event, calendarId, session);\n    if (isDuplicate) {\n      console.log(`Duplicate event found: \"${event.title}\". Skipping...`);\n      failed.push(event.title);\n      continue;\n    }\n\n    const googleEventId = await createGoogleCalendarEvent(event, calendarId, session, signOut, setRateLimitInfo);\n    if (googleEventId) {\n      console.log('New Google Event ID created:', googleEventId);\n      await updateAirtableWithGoogleEventId(event.id, googleEventId);\n      added.push(event.title);\n    } else {\n      failed.push(event.title);\n    }\n\n    // Introduce a delay of 1 second between requests\n    await sleep(1000);\n  }\n\n  setAddedRecords(prev => [...prev, ...added]);\n  setFailedRecords(prev => [...prev, ...failed]);\n\n  console.log(`Finished populating Google Calendar (${calendarName}) with Airtable records.`);\n}\n\n// Component to display each calendar section with countdown\nfunction CalendarSection({ calendarId, calendarName, session, signOut, setAddedRecords, setFailedRecords, setRateLimitInfo }) {\n  const [lastSyncTime, setLastSyncTime] = useState(null);\n  const [timeUntilNextSync, setTimeUntilNextSync] = useState(0);\n\n  useEffect(() => {\n    const calculateTimeUntilNextSync = () => {\n      const now = new Date();\n      if (lastSyncTime) {\n        const elapsed = now - lastSyncTime;\n        const remainingTime = 450000 - elapsed; // 450,000 ms = 7.5 minutes\n        setTimeUntilNextSync(Math.max(0, remainingTime));\n      }\n    };\n\n    const syncEvents = () => {\n      const now = new Date();\n\n      // Calculate time since last sync\n      if (lastSyncTime && (now - lastSyncTime) < 450000) {\n        calculateTimeUntilNextSync();\n        return;\n      }\n\n      if (session) {\n        if (!session.provider_token) {\n          console.error('No valid session token found. Logging out.');\n          signOut();\n          return;\n        }\n\n        populateGoogleCalendarWithAirtableRecords(\n          calendarId, \n          calendarName, \n          session, \n          signOut, \n          setAddedRecords, \n          setFailedRecords, \n          setRateLimitInfo\n        )\n          .then(() => {\n            console.log(`Finished syncing Airtable events to Google Calendar (${calendarName})`);\n            setLastSyncTime(new Date());  // Update last sync time\n            setTimeUntilNextSync(450000);  // Reset countdown\n          })\n          .catch(error => console.error(`Error syncing Airtable to Google Calendar (${calendarName}):`, error));\n      }\n    };\n\n    // Run syncEvents immediately when the component mounts\n    syncEvents();\n\n    // Set up an interval to run syncEvents every 6.6 minutes (400000 ms)\n    const intervalId = setInterval(syncEvents, 400000);\n\n    // Update countdown every second\n    const countdownInterval = setInterval(() => {\n      calculateTimeUntilNextSync();\n    }, 1000);\n\n    // Clear the intervals when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n      clearInterval(countdownInterval);\n    };\n  }, [session, signOut, calendarId, calendarName, setAddedRecords, setFailedRecords, setRateLimitInfo, lastSyncTime]);\n\n  // Convert milliseconds to mm:ss format\n  const formatTime = (ms) => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"calendar-item\">\n      <h2>{calendarName}</h2>\n      {timeUntilNextSync > 0 ? (\n        <p>Next sync available in: {formatTime(timeUntilNextSync)}</p>\n      ) : (\n        <p>Ready to sync!</p>\n      )}\n    </div>\n  );\n}\n\n// Main App component\nfunction App() {\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [addedRecords, setAddedRecords] = useState([]);\n  const [failedRecords, setFailedRecords] = useState([]);\n  const [rateLimitInfo, setRateLimitInfo] = useState({ remaining: null, limit: null, reset: null });\n\n  useEffect(() => {\n    // Fetch existing records from Airtable or another source if needed\n    async function fetchExistingRecords() {\n      console.log('Fetching existing records from Airtable...');\n      const existingAddedRecords = await fetchAddedRecordsFromAirtable();\n      const existingFailedRecords = await fetchFailedRecordsFromAirtable();\n\n      console.log('Fetched existing records:', { existingAddedRecords, existingFailedRecords });\n      setAddedRecords(existingAddedRecords);\n      setFailedRecords(existingFailedRecords);\n    }\n\n    fetchExistingRecords();\n  }, []);\n\n  const calendarInfo = [\n    { id: 'c_ebe1fcbce1be361c641591a6c389d4311df7a97961af0020c889686ae059d20a@group.calendar.google.com', name: 'Savannah'}\n\n  ].sort((a, b) => a.name.localeCompare(b.name));\n\n  const handleManualSync = async () => {\n    console.log('Manual sync initiated...');\n    if (!session) return;\n\n    for (const calendar of calendarInfo) {\n      console.log(`Syncing data for calendar: ${calendar.name}`);\n      await populateGoogleCalendarWithAirtableRecords(\n        calendar.id,\n        calendar.name,\n        session,\n        () => supabase.auth.signOut(),\n        setAddedRecords,\n        setFailedRecords,\n        setRateLimitInfo\n      );\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Warranty Calendar</h1>\n        <div style={{ width: \"100%\", margin: \"0 auto\" }}>\n          {session ?\n            <>\n              <h2>{getGreeting()} {session.user.email}</h2>\n              <hr />\n              <div className=\"calendar-grid\">\n                {calendarInfo.map(calendar => (\n                  <CalendarSection\n                    key={calendar.id}\n                    calendarId={calendar.id}\n                    calendarName={calendar.name}\n                    session={session}\n                    signOut={() => supabase.auth.signOut()}\n                    setAddedRecords={setAddedRecords}\n                    setFailedRecords={setFailedRecords}\n                    setRateLimitInfo={setRateLimitInfo}\n                  />\n                ))}\n              </div>\n              <div className=\"records-summary\">\n                <h3>Records Summary</h3>\n                <div className=\"summary-container\">\n                  <div className=\"added-records\">\n                    <h4>Successfully Added Records:</h4>\n                    {addedRecords.length > 0 ? (\n                      <ul>\n                        {addedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records added.</p>\n                    )}\n                  </div>\n                  <div className=\"failed-records\">\n                    <h4>Failed to Add Records:</h4>\n                    {failedRecords.length > 0 ? (\n                      <ul>\n                        {failedRecords.map((record, index) => (\n                          <li key={index}>{record}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p>No records failed.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"rate-limit-info\">\n                <h4>Google Calendar API Rate Limit Information:</h4>\n                {rateLimitInfo.limit !== null ? (\n                  <ul>\n                    <li>Limit: {rateLimitInfo.limit}</li>\n                    <li>Remaining: {rateLimitInfo.remaining}</li>\n                    <li>Reset Time: {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()}</li>\n                  </ul>\n                ) : (\n                  <p>No rate limit information available.</p>\n                )}\n              </div>\n              <button onClick={handleManualSync}>Sync Data Now</button>\n              <p></p>\n              <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n            </>\n            :\n            <>\n              <button onClick={() => supabase.auth.signInWithOAuth({ provider: 'google', options: { scopes: 'https://www.googleapis.com/auth/calendar' } })}>\n                Sign In With Google\n              </button>\n            </>\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}