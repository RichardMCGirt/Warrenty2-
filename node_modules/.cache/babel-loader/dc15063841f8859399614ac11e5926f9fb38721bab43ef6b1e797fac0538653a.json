{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.tsx\nvar src_exports = {};\n__export(src_exports, {\n  SessionContextProvider: () => SessionContextProvider,\n  useSession: () => useSession,\n  useSessionContext: () => useSessionContext,\n  useSupabaseClient: () => useSupabaseClient,\n  useUser: () => useUser\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/components/SessionContext.tsx\nvar import_react = __toESM(require(\"react\"));\nvar SessionContext = (0, import_react.createContext)({\n  isLoading: true,\n  session: null,\n  error: null,\n  supabaseClient: {}\n});\nvar SessionContextProvider = _ref => {\n  let {\n    supabaseClient,\n    initialSession = null,\n    children\n  } = _ref;\n  const [session, setSession] = (0, import_react.useState)(initialSession);\n  const [isLoading, setIsLoading] = (0, import_react.useState)(!initialSession);\n  const [error, setError] = (0, import_react.useState)();\n  (0, import_react.useEffect)(() => {\n    let mounted = true;\n    async function getSession() {\n      const {\n        data: {\n          session: session2\n        },\n        error: error2\n      } = await supabaseClient.auth.getSession();\n      if (mounted) {\n        if (error2) {\n          setError(error2);\n          setIsLoading(false);\n          return;\n        }\n        setSession(session2);\n        setIsLoading(false);\n      }\n    }\n    getSession();\n  }, []);\n  (0, import_react.useEffect)(() => {\n    const {\n      data: {\n        subscription\n      }\n    } = supabaseClient.auth.onAuthStateChange((event, session2) => {\n      if (session2 && (event === \"SIGNED_IN\" || event === \"TOKEN_REFRESHED\")) {\n        setSession(session2);\n      }\n      if (event === \"SIGNED_OUT\") {\n        setSession(null);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const value = (0, import_react.useMemo)(() => {\n    if (isLoading) {\n      return {\n        isLoading: true,\n        session: null,\n        error: null,\n        supabaseClient\n      };\n    }\n    if (error) {\n      return {\n        isLoading: false,\n        session: null,\n        error,\n        supabaseClient\n      };\n    }\n    return {\n      isLoading: false,\n      session,\n      error: null,\n      supabaseClient\n    };\n  }, [isLoading, session, error]);\n  return /* @__PURE__ */import_react.default.createElement(SessionContext.Provider, {\n    value\n  }, children);\n};\nvar useSessionContext = () => {\n  const context = (0, import_react.useContext)(SessionContext);\n  if (context === void 0) {\n    throw new Error(`useSessionContext must be used within a SessionContextProvider.`);\n  }\n  return context;\n};\nfunction useSupabaseClient() {\n  const context = (0, import_react.useContext)(SessionContext);\n  if (context === void 0) {\n    throw new Error(`useSupabaseClient must be used within a SessionContextProvider.`);\n  }\n  return context.supabaseClient;\n}\nvar useSession = () => {\n  const context = (0, import_react.useContext)(SessionContext);\n  if (context === void 0) {\n    throw new Error(`useSession must be used within a SessionContextProvider.`);\n  }\n  return context.session;\n};\nvar useUser = () => {\n  var _a, _b;\n  const context = (0, import_react.useContext)(SessionContext);\n  if (context === void 0) {\n    throw new Error(`useUser must be used within a SessionContextProvider.`);\n  }\n  return (_b = (_a = context.session) == null ? void 0 : _a.user) != null ? _b : null;\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  SessionContextProvider,\n  useSession,\n  useSessionContext,\n  useSupabaseClient,\n  useUser\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAA;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;AAAAC;;;ACCA,mBAOOC;AA4BP,IAAMC,iBAAiB,gCAA8B;EACnDC,WAAW;EACXC,SAAS;EACTC,OAAO;EACPC,gBAAgB,CAAC;AACnB,CAAC;AAOM,IAAMX,yBAAyB,QAIgB;EAAA,IAJf;IACrCW;IACAC,iBAAiB;IACjBC;EAAA;EAEA,MAAM,CAACJ,SAASK,cAAc,2BAAyBF,cAAc;EACrE,MAAM,CAACJ,WAAWO,gBAAgB,2BAAkB,CAACH,cAAc;EACnE,MAAM,CAACF,OAAOM,YAAY,4BAAoB;EAE9C,4BAAU,MAAM;IACd,IAAIC,UAAU;IAEd,4BAA4B;MAC1B,MAAM;QACJC,MAAM;UAAET;QAAA;QACRC;MAAA,IACE,MAAMC,eAAeQ,KAAKC,YAAW;MAGzC,IAAIH,SAAS;QACX,IAAII,QAAO;UACTL,SAASK,MAAK;UACdN,aAAa,KAAK;UAClB;QACF;QAEAD,WAAWQ,QAAO;QAClBP,aAAa,KAAK;MACpB;IACF;IAEAK,YAAW;EACb,GAAG,EAAE;EAEL,4BAAU,MAAM;IACd,MAAM;MACJF,MAAM;QAAEK;MAAA;IAAA,IACNZ,eAAeQ,KAAKK,kBAAkB,CAACC,OAAOH,aAAY;MAC5D,IAAIA,aAAYG,UAAU,eAAeA,UAAU,oBAAoB;QACrEX,WAAWQ,QAAO;MACpB;MAEA,IAAIG,UAAU,cAAc;QAC1BX,WAAW,IAAI;MACjB;IACF,CAAC;IAED,OAAO,MAAM;MACXS,aAAaG,aAAY;IAC3B;EACF,GAAG,EAAE;EAEL,MAAMC,QAAwB,0BAAQ,MAAM;IAC1C,IAAInB,WAAW;MACb,OAAO;QACLA,WAAW;QACXC,SAAS;QACTC,OAAO;QACPC;MACF;IACF;IAEA,IAAID,OAAO;MACT,OAAO;QACLF,WAAW;QACXC,SAAS;QACTC;QACAC;MACF;IACF;IAEA,OAAO;MACLH,WAAW;MACXC;MACAC,OAAO;MACPC;IACF;EACF,GAAG,CAACH,WAAWC,SAASC,KAAK,CAAC;EAE9B,OACE,kDAACH,eAAeqB,UAAf;IAAwBD;EAAA,GAAed,QAAS;AAErD;AAEO,IAAMX,oBAAoB,MAAM;EACrC,MAAM2B,UAAU,6BAAWtB,cAAc;EACzC,IAAIsB,YAAY,QAAW;IACzB,MAAM,IAAIC,MACR,iEACF;EACF;EAEA,OAAOD;AACT;AAEO,6BAKH;EACF,MAAMA,UAAU,6BAAWtB,cAAc;EACzC,IAAIsB,YAAY,QAAW;IACzB,MAAM,IAAIC,MACR,iEACF;EACF;EAEA,OAAOD,QAAQlB;AACjB;AAEO,IAAMV,aAAa,MAAM;EAC9B,MAAM4B,UAAU,6BAAWtB,cAAc;EACzC,IAAIsB,YAAY,QAAW;IACzB,MAAM,IAAIC,MAAM,0DAA0D;EAC5E;EAEA,OAAOD,QAAQpB;AACjB;AAEO,IAAML,UAAU,MAAM;EAxK7B;EAyKE,MAAMyB,UAAU,6BAAWtB,cAAc;EACzC,IAAIsB,YAAY,QAAW;IACzB,MAAM,IAAIC,MAAM,uDAAuD;EACzE;EAEA,OAAO,oBAAQrB,YAAR,mBAAiBsB,SAAjB,YAAyB;AAClC","names":["__export","SessionContextProvider","useSession","useSessionContext","useSupabaseClient","useUser","module","__toESM","SessionContext","isLoading","session","error","supabaseClient","initialSession","children","setSession","setIsLoading","setError","mounted","data","auth","getSession","error2","session2","subscription","onAuthStateChange","event","unsubscribe","value","Provider","context","Error","user"],"sources":["/Users/richardmcgirt/Desktop/GoogleCalendarAPIReactSupabase/node_modules/@supabase/auth-helpers-react/src/index.tsx","/Users/richardmcgirt/Desktop/GoogleCalendarAPIReactSupabase/node_modules/@supabase/auth-helpers-react/src/components/SessionContext.tsx"],"sourcesContent":["// Types\nexport type { Session, User, SupabaseClient } from '@supabase/supabase-js';\n\n// Methods & Components\nexport * from './components/SessionContext';\n","import { AuthError, Session, SupabaseClient } from '@supabase/supabase-js';\nimport React, {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\n\nexport type SessionContext =\n  | {\n      isLoading: true;\n      session: null;\n      error: null;\n      supabaseClient: SupabaseClient;\n    }\n  | {\n      isLoading: false;\n      session: Session;\n      error: null;\n      supabaseClient: SupabaseClient;\n    }\n  | {\n      isLoading: false;\n      session: null;\n      error: AuthError;\n      supabaseClient: SupabaseClient;\n    }\n  | {\n      isLoading: false;\n      session: null;\n      error: null;\n      supabaseClient: SupabaseClient;\n    };\n\nconst SessionContext = createContext<SessionContext>({\n  isLoading: true,\n  session: null,\n  error: null,\n  supabaseClient: {} as any\n});\n\nexport interface SessionContextProviderProps {\n  supabaseClient: SupabaseClient;\n  initialSession?: Session | null;\n}\n\nexport const SessionContextProvider = ({\n  supabaseClient,\n  initialSession = null,\n  children\n}: PropsWithChildren<SessionContextProviderProps>) => {\n  const [session, setSession] = useState<Session | null>(initialSession);\n  const [isLoading, setIsLoading] = useState<boolean>(!initialSession);\n  const [error, setError] = useState<AuthError>();\n\n  useEffect(() => {\n    let mounted = true;\n\n    async function getSession() {\n      const {\n        data: { session },\n        error\n      } = await supabaseClient.auth.getSession();\n\n      // only update the react state if the component is still mounted\n      if (mounted) {\n        if (error) {\n          setError(error);\n          setIsLoading(false);\n          return;\n        }\n\n        setSession(session);\n        setIsLoading(false);\n      }\n    }\n\n    getSession();\n  }, []);\n\n  useEffect(() => {\n    const {\n      data: { subscription }\n    } = supabaseClient.auth.onAuthStateChange((event, session) => {\n      if (session && (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED')) {\n        setSession(session);\n      }\n\n      if (event === 'SIGNED_OUT') {\n        setSession(null);\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const value: SessionContext = useMemo(() => {\n    if (isLoading) {\n      return {\n        isLoading: true,\n        session: null,\n        error: null,\n        supabaseClient\n      };\n    }\n\n    if (error) {\n      return {\n        isLoading: false,\n        session: null,\n        error,\n        supabaseClient\n      };\n    }\n\n    return {\n      isLoading: false,\n      session,\n      error: null,\n      supabaseClient\n    };\n  }, [isLoading, session, error]);\n\n  return (\n    <SessionContext.Provider value={value}>{children}</SessionContext.Provider>\n  );\n};\n\nexport const useSessionContext = () => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(\n      `useSessionContext must be used within a SessionContextProvider.`\n    );\n  }\n\n  return context;\n};\n\nexport function useSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>() {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(\n      `useSupabaseClient must be used within a SessionContextProvider.`\n    );\n  }\n\n  return context.supabaseClient as SupabaseClient<Database, SchemaName>;\n}\n\nexport const useSession = () => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(`useSession must be used within a SessionContextProvider.`);\n  }\n\n  return context.session;\n};\n\nexport const useUser = () => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(`useUser must be used within a SessionContextProvider.`);\n  }\n\n  return context.session?.user ?? null;\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}